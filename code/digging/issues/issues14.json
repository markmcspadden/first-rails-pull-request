[
  {
    "url": "https://api.github.com/repos/rails/rails/issues/6534",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/6534/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/6534/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/6534/events",
    "html_url": "https://github.com/rails/rails/issues/6534",
    "id": 4793167,
    "number": 6534,
    "title": "if a rendered resource is nil, rails defaults to template searching",
    "user": {
      "login": "gnufied",
      "id": 278,
      "avatar_url": "https://secure.gravatar.com/avatar/6cb0b3e9e50fe72285047eac56209f49?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "6cb0b3e9e50fe72285047eac56209f49",
      "url": "https://api.github.com/users/gnufied",
      "html_url": "https://github.com/gnufied",
      "followers_url": "https://api.github.com/users/gnufied/followers",
      "following_url": "https://api.github.com/users/gnufied/following",
      "gists_url": "https://api.github.com/users/gnufied/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnufied/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnufied/subscriptions",
      "organizations_url": "https://api.github.com/users/gnufied/orgs",
      "repos_url": "https://api.github.com/users/gnufied/repos",
      "events_url": "https://api.github.com/users/gnufied/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnufied/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionpack",
        "name": "actionpack",
        "color": "FFF700"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionview",
        "name": "actionview",
        "color": "d7e102"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 12,
    "created_at": "2012-05-29T11:34:08Z",
    "updated_at": "2012-11-29T22:03:10Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "```ruby\n  def create\n    @user = nil\n    respond_to do |format|\n      format.html { render action: \"new\" }\n      format.json { render json: @user, status: :unprocessable_entity }\n      format.xml { render xml: @user, status: :unprocessable_entity}\n    end\n  end\n```\n\nThe error:\n\n```ruby\n\n  1) Error:\ntest_should_create_user(UsersControllerTest):\nActionView::MissingTemplate: Missing template users/create, application/create with {:locale=>[:en], :formats=>[:xml], :handlers=>[:erb, :builder, :coffee]}. Searched in:\n  * \"/Users/gnufied/railsyard/xml_bug/app/views\"\n```\n\nI believe this is a bug and I see no reason why rails should not just render that nil value, as it used to in rails2. Thoughts?\n\n/cc @jeremy "
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/6264",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/6264/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/6264/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/6264/events",
    "html_url": "https://github.com/rails/rails/issues/6264",
    "id": 4527521,
    "number": 6264,
    "title": "Adds rbx-19mode and jruby-19mode to Travis CI ",
    "user": {
      "login": "parndt",
      "id": 10128,
      "avatar_url": "https://secure.gravatar.com/avatar/1d676127a3e4c0531e2d37dabef0a12d?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "1d676127a3e4c0531e2d37dabef0a12d",
      "url": "https://api.github.com/users/parndt",
      "html_url": "https://github.com/parndt",
      "followers_url": "https://api.github.com/users/parndt/followers",
      "following_url": "https://api.github.com/users/parndt/following",
      "gists_url": "https://api.github.com/users/parndt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/parndt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/parndt/subscriptions",
      "organizations_url": "https://api.github.com/users/parndt/orgs",
      "repos_url": "https://api.github.com/users/parndt/repos",
      "events_url": "https://api.github.com/users/parndt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/parndt/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/onhold",
        "name": "onhold",
        "color": "ededed"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 31,
    "created_at": "2012-05-11T04:12:43Z",
    "updated_at": "2013-04-12T09:30:16Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/6264",
      "diff_url": "https://github.com/rails/rails/pull/6264.diff",
      "patch_url": "https://github.com/rails/rails/pull/6264.patch"
    },
    "body": "I've added the rubies to allow_failures so that the build status is not interrupted.  I would love to see Rails run CI against these rubies as I believe it will help to fix bugs in the rubies themselves and also Rails.\r\n\r\nBoth are running only in 1.9 mode as master does not support 1.8 anymore.\r\n\r\nThanks for the time taken to review this."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/6177",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/6177/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/6177/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/6177/events",
    "html_url": "https://github.com/rails/rails/issues/6177",
    "id": 4440248,
    "number": 6177,
    "title": "Multi assignment of aliased columns does not work",
    "user": {
      "login": "kakra",
      "id": 17684,
      "avatar_url": "https://secure.gravatar.com/avatar/f92677a36a0cf433021950ba207af73b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "f92677a36a0cf433021950ba207af73b",
      "url": "https://api.github.com/users/kakra",
      "html_url": "https://github.com/kakra",
      "followers_url": "https://api.github.com/users/kakra/followers",
      "following_url": "https://api.github.com/users/kakra/following",
      "gists_url": "https://api.github.com/users/kakra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kakra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kakra/subscriptions",
      "organizations_url": "https://api.github.com/users/kakra/orgs",
      "repos_url": "https://api.github.com/users/kakra/repos",
      "events_url": "https://api.github.com/users/kakra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kakra/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2012-05-06T01:26:27Z",
    "updated_at": "2013-04-10T17:25:40Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "When I try to multi assign a datetime value to an aliased attribute, it does not work. It fails with an exception: MultiparameterAssignmentErrors\r\n\r\nThe fix for me was to prepare the params array to rename the columns to their original version before passing them to the update method like this:\r\n\r\n<pre>\r\n  before_filter :work_around_datetime_bug, :only => [:update, :create]\r\n  def work_around_datetime_bug\r\n    params[:article].each do |k,v|\r\n      if k.starts_with? \"online_at\"\r\n        params[:article][k.gsub /^online_at/, \"show_start\"] = v\r\n        params[:article].delete k\r\n      end\r\n      if k.starts_with? \"offline_at\"\r\n        params[:article][k.gsub /^offline_at/, \"show_end\"] = v\r\n        params[:article].delete k\r\n      end\r\n    end\r\n  end\r\n</pre>\r\n\r\nThe cause seems to be that the multi assignment methods do a lookup with Article.columns_hash to find out about the column type - but that won't contain any aliased methods:\r\n\r\n<pre>\r\n    148     def read_value_from_parameter(name, values_hash_from_param)\r\n--> 149       klass = (self.class.reflect_on_aggregation(name.to_sym) || column_for_attribute(name)).klass\r\n    150       if values_hash_from_param.values.all?{|v|v.nil?}\r\n</pre>\r\n\r\nThis line from activerecord-3.2.1/lib/active_record/attribute_assignment.rb returns nil in the outer brackets because column_for_attribute returns nil:\r\n\r\n<pre>\r\n196     # Returns the column object for the named attribute.\r\n197     def column_for_attribute(name)\r\n198       self.class.columns_hash[name.to_s]\r\n199     end\r\n</pre>\r\n\r\nIt just looks in the columns_hash not considering any attribute aliases. This is also a problem of some plugins which need to get the column type and cannot consider attribute aliases because Rails seems not to record any info about this.\r\n\r\nI do not have enough insight of the inner workings of active record to work out a proper fix but maybe it would be enough to copy the contents in the columns_hash when calling alias_attribute like this:\r\n\r\n<pre>\r\ndef alias_attribute(new_name, old_name)\r\n  ...\r\n  self.class.columns_hash[new_name.to_s] = self.class.columns_hash[old_name.to_s]\r\n  ...\r\nend\r\n</pre>"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/6132",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/6132/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/6132/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/6132/events",
    "html_url": "https://github.com/rails/rails/issues/6132",
    "id": 4395429,
    "number": 6132,
    "title": "ActiveRecord::Relation#to_sql does not match SQL executed when using includes",
    "user": {
      "login": "mikelikesbikes",
      "id": 54649,
      "avatar_url": "https://secure.gravatar.com/avatar/2d2a9c3bfceea360733662f5699139e6?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "2d2a9c3bfceea360733662f5699139e6",
      "url": "https://api.github.com/users/mikelikesbikes",
      "html_url": "https://github.com/mikelikesbikes",
      "followers_url": "https://api.github.com/users/mikelikesbikes/followers",
      "following_url": "https://api.github.com/users/mikelikesbikes/following",
      "gists_url": "https://api.github.com/users/mikelikesbikes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikelikesbikes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikelikesbikes/subscriptions",
      "organizations_url": "https://api.github.com/users/mikelikesbikes/orgs",
      "repos_url": "https://api.github.com/users/mikelikesbikes/repos",
      "events_url": "https://api.github.com/users/mikelikesbikes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikelikesbikes/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 22,
    "created_at": "2012-05-02T23:06:45Z",
    "updated_at": "2013-04-18T19:17:08Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "```ruby\r\n1.9.3p194 :009 > Todo.includes(:user).where(\"users.id\" => 1)\r\n  SQL (0.5ms)  SELECT \"todos\".\"id\" AS t0_r0, \"todos\".\"name\" AS t0_r1, \"todos\".\"user_id\" AS t0_r2, \"todos\".\"created_at\" AS t0_r3, \"todos\".\"updated_at\" AS t0_r4, \"users\".\"id\" AS t1_r0, \"users\".\"name\" AS t1_r1, \"users\".\"created_at\" AS t1_r2, \"users\".\"updated_at\" AS t1_r3 FROM \"todos\" LEFT OUTER JOIN \"users\" ON \"users\".\"id\" = \"todos\".\"user_id\" WHERE \"users\".\"id\" = 1\r\n => [#<Todo id: 2, name: \"Wash the car\", user_id: 1, created_at: \"2012-05-02 22:15:55\", updated_at: \"2012-05-02 22:15:55\">, #<Todo id: 3, name: \"Get a spare key made\", user_id: 1, created_at: \"2012-05-02 22:16:05\", updated_at: \"2012-05-02 22:16:05\">] \r\n1.9.3p194 :010 > Todo.includes(:user).where(\"users.id\" => 1).to_sql\r\n => \"SELECT \\\"todos\\\".* FROM \\\"todos\\\"  WHERE \\\"users\\\".\\\"id\\\" = 1\" \r\n```\r\n\r\nIn looking at Issue #5990, @isaacsanders and I stumbled upon this issue. \r\n\r\nWe were attempting to make `#pluck` generate the same query that is used in the standard finder, but discovered that it doesn't use that query. We think this is the issue at the heart of #5990.\r\n\r\nThoughts? \r\n\r\ncc @josevalim @tenderlove @steveklabnik "
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/6127",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/6127/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/6127/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/6127/events",
    "html_url": "https://github.com/rails/rails/issues/6127",
    "id": 4394489,
    "number": 6127,
    "title": "ActiveRecord Hstore bug: can't update a key in the hash",
    "user": {
      "login": "joevandyk",
      "id": 1179,
      "avatar_url": "https://secure.gravatar.com/avatar/e1c881ecb7bf966f44fecaa5387ab26b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "e1c881ecb7bf966f44fecaa5387ab26b",
      "url": "https://api.github.com/users/joevandyk",
      "html_url": "https://github.com/joevandyk",
      "followers_url": "https://api.github.com/users/joevandyk/followers",
      "following_url": "https://api.github.com/users/joevandyk/following",
      "gists_url": "https://api.github.com/users/joevandyk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joevandyk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joevandyk/subscriptions",
      "organizations_url": "https://api.github.com/users/joevandyk/orgs",
      "repos_url": "https://api.github.com/users/joevandyk/repos",
      "events_url": "https://api.github.com/users/joevandyk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joevandyk/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/bug",
        "name": "bug",
        "color": "444444"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2012-05-02T21:59:05Z",
    "updated_at": "2013-04-25T16:27:40Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "https://github.com/joevandyk/rails/commit/f2318b2d146fcc52f5c494bef1b9a9fb9457c69e shows a failing test.\r\n\r\n```ruby\r\n  def test_updating_key                                                                             \r\n    x = Hstore.create! :tags => { \"key1\" => \"old value 1\", \"key2\" => \"old value 2\" }                \r\n    x.reload                                                                                        \r\n    assert_equal \"old value 1\", x.tags[\"key1\"]                                                      \r\n                                                                                                    \r\n    # Nothing gets saved/updated here.\r\n    x.tags[\"key1\"] = \"new\"                                                                          \r\n    x.save!                                                                                         \r\n                                                                                                    \r\n    assert_equal \"new\", x.reload.tags[\"key1\"]                                                       \r\n    assert_equal \"old value 2\",   x.reload.tags[\"key2\"]                                             \r\n  end\r\n```\r\n\r\n```\r\n  1) Failure:\r\ntest_updating_key(PostgresqlHstoreTest) [cases/adapters/postgresql/hstore_test.rb:55]:\r\nExpected: \"new\"\r\n  Actual: \"old value 1\"\r\n```"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/6094",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/6094/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/6094/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/6094/events",
    "html_url": "https://github.com/rails/rails/issues/6094",
    "id": 4357201,
    "number": 6094,
    "title": "Provide a more useful definition of json_escape",
    "user": {
      "login": "jfirebaugh",
      "id": 98601,
      "avatar_url": "https://secure.gravatar.com/avatar/a82409021ddf415a8027872b889c5f74?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "a82409021ddf415a8027872b889c5f74",
      "url": "https://api.github.com/users/jfirebaugh",
      "html_url": "https://github.com/jfirebaugh",
      "followers_url": "https://api.github.com/users/jfirebaugh/followers",
      "following_url": "https://api.github.com/users/jfirebaugh/following",
      "gists_url": "https://api.github.com/users/jfirebaugh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jfirebaugh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jfirebaugh/subscriptions",
      "organizations_url": "https://api.github.com/users/jfirebaugh/orgs",
      "repos_url": "https://api.github.com/users/jfirebaugh/repos",
      "events_url": "https://api.github.com/users/jfirebaugh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jfirebaugh/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activesupport",
        "name": "activesupport",
        "color": "FC9300"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 13,
    "created_at": "2012-04-30T20:30:58Z",
    "updated_at": "2013-04-19T01:59:00Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/6094",
      "diff_url": "https://github.com/rails/rails/pull/6094.diff",
      "patch_url": "https://github.com/rails/rails/pull/6094.patch"
    },
    "body": "The existing definition removes double quote characters, and hence returns invalid JSON, making it unsuitable for the most common use case: [bootstrapping JSON within a `<script>` element](http://jfire.io/blog/2012/04/30/how-to-securely-bootstrap-json-in-a-rails-view/).\r\n\r\nI am unaware of any use cases satisfied by the current behavior, which was [previously discussed on lighthouse](https://rails.lighthouseapp.com/projects/8994/tickets/1485-json_escape-eats-away-double-quotes) without coming to a satisfactory resolution. The original commit at 0ff7a2d89fc95dcb0a32ed92aab7156b0778a7ea does not indicate that the double quote behavior was intentional. It seems likely that it was simply an oversight after copy and pasting the definition of `html_escape`.\r\n\r\nSince Rails does not make it easy to correctly escape bootstrapped JSON, incorrect and insecure methods are widespread and incorrectly recommended: [1](https://github.com/search?utf8=%E2%9C%93&q=raw+to_json&repo=&langOverride=&start_value=1&type=Code&language=HTML%2BERB), [2](https://github.com/search?utf8=%E2%9C%93&q=to_json+html_safe&repo=&langOverride=&start_value=1&type=Code&language=HTML%2BERB), [3](http://stackoverflow.com/a/3758055/52207). This change, together with community education, would alleviate the situation.\r\n\r\nIt's worth discussion whether `json_escape` should always return HTML-safe strings, such that it can be used without explicitly calling `html_safe`:\r\n\r\n```erb\r\n<script>\r\n  var data = <%=j @data.to_json %>;\r\n</script>\r\n```\r\n\r\nAlso related is the discussion of the other `j` helper at #3578."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5982",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5982/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5982/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5982/events",
    "html_url": "https://github.com/rails/rails/issues/5982",
    "id": 4289524,
    "number": 5982,
    "title": "ActiveRecord models based on a view create new instances with id = 0 rather than nil",
    "user": {
      "login": "stevenchanin",
      "id": 93645,
      "avatar_url": "https://secure.gravatar.com/avatar/ab953901492e7d70fbf7adf19a080750?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "ab953901492e7d70fbf7adf19a080750",
      "url": "https://api.github.com/users/stevenchanin",
      "html_url": "https://github.com/stevenchanin",
      "followers_url": "https://api.github.com/users/stevenchanin/followers",
      "following_url": "https://api.github.com/users/stevenchanin/following",
      "gists_url": "https://api.github.com/users/stevenchanin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevenchanin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevenchanin/subscriptions",
      "organizations_url": "https://api.github.com/users/stevenchanin/orgs",
      "repos_url": "https://api.github.com/users/stevenchanin/repos",
      "events_url": "https://api.github.com/users/stevenchanin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevenchanin/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": {
      "login": "tenderlove",
      "id": 3124,
      "avatar_url": "https://secure.gravatar.com/avatar/f29327647a9cff5c69618bae420792ea?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "f29327647a9cff5c69618bae420792ea",
      "url": "https://api.github.com/users/tenderlove",
      "html_url": "https://github.com/tenderlove",
      "followers_url": "https://api.github.com/users/tenderlove/followers",
      "following_url": "https://api.github.com/users/tenderlove/following",
      "gists_url": "https://api.github.com/users/tenderlove/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tenderlove/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tenderlove/subscriptions",
      "organizations_url": "https://api.github.com/users/tenderlove/orgs",
      "repos_url": "https://api.github.com/users/tenderlove/repos",
      "events_url": "https://api.github.com/users/tenderlove/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tenderlove/received_events",
      "type": "User"
    },
    "milestone": null,
    "comments": 13,
    "created_at": "2012-04-25T20:38:35Z",
    "updated_at": "2013-03-07T14:33:39Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "Given a model like:\r\n\r\n    class Manufacturer < ActiveRecord::Base\r\n      attr_accessible :name\r\n\r\n      self.table_name = 'v_manufacturers'\r\n      self.primary_key = 'id'\r\n    end\r\n\r\nwhen you create a new instance\r\n\r\n    m = Manufacturer.new(name: 'Nissan')\r\n    # => #<Manufacturer id: 0, name: \"Nissan\">\r\n\r\nbut the id should be nil.\r\n\r\nFor a test case with tests (1.9.3 @ rails 3.2), see\r\n\r\n    https://github.com/stevenchanin/view_test\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5943",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5943/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5943/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5943/events",
    "html_url": "https://github.com/rails/rails/issues/5943",
    "id": 4249849,
    "number": 5943,
    "title": "Remove assignment that causes session creation",
    "user": {
      "login": "jordoh",
      "id": 450345,
      "avatar_url": "https://secure.gravatar.com/avatar/cd885d89b8c9f7f6ec853b303963614c?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "cd885d89b8c9f7f6ec853b303963614c",
      "url": "https://api.github.com/users/jordoh",
      "html_url": "https://github.com/jordoh",
      "followers_url": "https://api.github.com/users/jordoh/followers",
      "following_url": "https://api.github.com/users/jordoh/following",
      "gists_url": "https://api.github.com/users/jordoh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jordoh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jordoh/subscriptions",
      "organizations_url": "https://api.github.com/users/jordoh/orgs",
      "repos_url": "https://api.github.com/users/jordoh/repos",
      "events_url": "https://api.github.com/users/jordoh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jordoh/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionpack",
        "name": "actionpack",
        "color": "FFF700"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2012-04-23T21:47:05Z",
    "updated_at": "2013-04-11T23:42:44Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/5943",
      "diff_url": "https://github.com/rails/rails/pull/5943.diff",
      "patch_url": "https://github.com/rails/rails/pull/5943.patch"
    },
    "body": "`ActionDispatch::Request#reset_session` contains the following line:\r\n\r\n```\r\nself.session = {}\r\n```\r\n\r\nwhich appears to pre-date when sessions were updated to be lazily created. When using the ActiveRecord session store, calls to `reset_session` will result in `ActionDispatch::AbstractStore#call` creating a session record that is persisted, even if there is no session data (because `{}` is not an `AbstractStore::SessionHash`).\r\n\r\n`ActionDispatch::Session::SessionHash#destroy` is already being called on the previous line, which results in the session being cleared and destroyed (if it exists) - and does not result in a new session being created (unless the session is updated after the call to `reset_session`).\r\n\r\nAs a side note, it seems like the # TODO on `reset_session` has been fulfilled for a couple years now."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5892",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5892/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5892/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5892/events",
    "html_url": "https://github.com/rails/rails/issues/5892",
    "id": 4175291,
    "number": 5892,
    "title": "Don't fall back to HTML if requested :js format exists anywhere in path set",
    "user": {
      "login": "bradediger",
      "id": 4621,
      "avatar_url": "https://secure.gravatar.com/avatar/334805ec86cb3fe1ac2eda776a921fb2?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "334805ec86cb3fe1ac2eda776a921fb2",
      "url": "https://api.github.com/users/bradediger",
      "html_url": "https://github.com/bradediger",
      "followers_url": "https://api.github.com/users/bradediger/followers",
      "following_url": "https://api.github.com/users/bradediger/following",
      "gists_url": "https://api.github.com/users/bradediger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bradediger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bradediger/subscriptions",
      "organizations_url": "https://api.github.com/users/bradediger/orgs",
      "repos_url": "https://api.github.com/users/bradediger/repos",
      "events_url": "https://api.github.com/users/bradediger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bradediger/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionpack",
        "name": "actionpack",
        "color": "FFF700"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 8,
    "created_at": "2012-04-18T16:10:49Z",
    "updated_at": "2013-01-05T00:41:16Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/5892",
      "diff_url": "https://github.com/rails/rails/pull/5892.diff",
      "patch_url": "https://github.com/rails/rails/pull/5892.patch"
    },
    "body": "ActionView has a fallback feature to render an `:html` format template as a \"template of last resort\" even when `:js` is the only format specified, to support rendering HTML-formatted responses to XHR requests.\r\n\r\nI believe this fallback is broken when using multiple view paths. LookupContext treats a requested `:js` format as `[:js, :html]` when rendering anything except a layout. So the first view path will be matched against formats of `[:js, :html]` before the second view path is considered. Thus an \"index.html.erb\" in the first path will prevent an \"index.js.erb\" in any subsequent view paths from being rendered, even though the only format requested was JS.\r\n\r\nMy fix pushes down the fallback to lookup time; it attempts to look up the JS template in the PathSet, rescues any MissingTemplate, and retries with :html. I was conflicted about using exceptions for flow control here, but I wanted to do as little violence to the PathSet API as possible, and it currently raises MissingTemplate on missing templates.\r\n\r\nSome care had to be taken to ensure that layouts still only render their first format (so, for example, a JS request never renders an HTML template). That motivated the introduction of the `@layout_format` ivar.\r\n\r\nMajor props to the Rails team, especially @josevalim, for how accessible this code is. I went from \"hmm, that's weird\" to a failing test case in about 30 minutes. Thanks!"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5884",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5884/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5884/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5884/events",
    "html_url": "https://github.com/rails/rails/issues/5884",
    "id": 4162741,
    "number": 5884,
    "title": "Fix implied layout detection for anonymous controllers",
    "user": {
      "login": "mudge",
      "id": 287,
      "avatar_url": "https://secure.gravatar.com/avatar/beb7f5dd655d8b8e9093ef4fc5e59b6e?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "beb7f5dd655d8b8e9093ef4fc5e59b6e",
      "url": "https://api.github.com/users/mudge",
      "html_url": "https://github.com/mudge",
      "followers_url": "https://api.github.com/users/mudge/followers",
      "following_url": "https://api.github.com/users/mudge/following",
      "gists_url": "https://api.github.com/users/mudge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudge/subscriptions",
      "organizations_url": "https://api.github.com/users/mudge/orgs",
      "repos_url": "https://api.github.com/users/mudge/repos",
      "events_url": "https://api.github.com/users/mudge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudge/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionpack",
        "name": "actionpack",
        "color": "FFF700"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2012-04-17T22:17:45Z",
    "updated_at": "2013-03-15T06:44:34Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/5884",
      "diff_url": "https://github.com/rails/rails/pull/5884.diff",
      "patch_url": "https://github.com/rails/rails/pull/5884.patch"
    },
    "body": "When creating an anonymous subclass of a controller,\r\n`_write_layout_method` wasn't able to find a layout path even if a\r\nparent controller had one that could be used. Now, the method will call\r\n`super` if the current controller has no name.\r\n\r\nIn a related issue, we switch to using `anonymous?` rather than checking\r\nonly for `name` in order to be compatible with Ruby < 1.9 where anonymous\r\nclass names are set to the empty string rather than `nil`."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5883",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5883/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5883/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5883/events",
    "html_url": "https://github.com/rails/rails/issues/5883",
    "id": 4161321,
    "number": 5883,
    "title": "Association conditions on join models are not applied to aliased tables.",
    "user": {
      "login": "twinturbo",
      "id": 48928,
      "avatar_url": "https://secure.gravatar.com/avatar/877677f3c0cc6f8822a57b6732933d31?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "877677f3c0cc6f8822a57b6732933d31",
      "url": "https://api.github.com/users/twinturbo",
      "html_url": "https://github.com/twinturbo",
      "followers_url": "https://api.github.com/users/twinturbo/followers",
      "following_url": "https://api.github.com/users/twinturbo/following",
      "gists_url": "https://api.github.com/users/twinturbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/twinturbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/twinturbo/subscriptions",
      "organizations_url": "https://api.github.com/users/twinturbo/orgs",
      "repos_url": "https://api.github.com/users/twinturbo/repos",
      "events_url": "https://api.github.com/users/twinturbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/twinturbo/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-04-17T20:56:13Z",
    "updated_at": "2013-04-17T10:54:02Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "Complete issue described here: https://gist.github.com/2359376\r\n\r\nSay you have this:\r\n\r\n```ruby\r\nhas_many :followings\r\nhas_many :followers, :conditions => {:followings => {:approved => true }}\r\n```\r\n\r\nIf you do a join/include that references the followings table multiple times, the conditions are always applied to the \"followings\" table when AR has generated an aliased join table for that query. This breaks queries that need to do this.\r\n\r\nTLDR: Association conditions on join models are not applied to aliased tables."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5868",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5868/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5868/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5868/events",
    "html_url": "https://github.com/rails/rails/issues/5868",
    "id": 4142451,
    "number": 5868,
    "title": "Arel::Nodes::Ascending, postgresql_adapter, undefined method `gsub'",
    "user": {
      "login": "darkbushido",
      "id": 27995,
      "avatar_url": "https://secure.gravatar.com/avatar/a1d2c01b837ed2bd1937dbc750ccd86a?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "a1d2c01b837ed2bd1937dbc750ccd86a",
      "url": "https://api.github.com/users/darkbushido",
      "html_url": "https://github.com/darkbushido",
      "followers_url": "https://api.github.com/users/darkbushido/followers",
      "following_url": "https://api.github.com/users/darkbushido/following",
      "gists_url": "https://api.github.com/users/darkbushido/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darkbushido/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darkbushido/subscriptions",
      "organizations_url": "https://api.github.com/users/darkbushido/orgs",
      "repos_url": "https://api.github.com/users/darkbushido/repos",
      "events_url": "https://api.github.com/users/darkbushido/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darkbushido/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 10,
    "created_at": "2012-04-16T20:57:41Z",
    "updated_at": "2013-01-07T15:15:16Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "```ruby\r\nclass State < ActiveRecord::Base\r\n  has_many :cities\r\n  default_scope includes(:cities)\r\nend\r\n\r\nclass City < ActiveRecord::Base\r\n  belongs_to :state\r\nend\r\n\r\nState.order(State.arel_table[:name].asc).joins(:cities).where(:cities => {:name => \"Greenville\"}).limit(25)\r\n```\r\n\r\n```\r\nNoMethodError: undefined method `gsub' for #<Arel::Nodes::Ascending:0x000001049a2e00>\r\n\tfrom /Users/---/gems/activerecord-3.2.3/lib/active_record/connection_adapters/postgresql_adapter.rb:1092:in `block in distinct'\r\n\tfrom /Users/---/gems/activerecord-3.2.3/lib/active_record/connection_adapters/postgresql_adapter.rb:1092:in `collect'\r\n\tfrom /Users/---/gems/activerecord-3.2.3/lib/active_record/connection_adapters/postgresql_adapter.rb:1092:in `distinct'\r\n\tfrom /Users/---/gems/activerecord-3.2.3/lib/active_record/relation/finder_methods.rb:253:in `construct_limited_ids_condition'\r\n\tfrom /Users/---/gems/activerecord-3.2.3/lib/active_record/relation/finder_methods.rb:242:in `apply_join_dependency'\r\n\tfrom /Users/---/gems/activerecord-3.2.3/lib/active_record/relation/finder_methods.rb:231:in `construct_relation_for_association_find'\r\n\tfrom /Users/---/gems/activerecord-3.2.3/lib/active_record/relation/finder_methods.rb:210:in `find_with_associations'\r\n ```"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5853",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5853/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5853/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5853/events",
    "html_url": "https://github.com/rails/rails/issues/5853",
    "id": 4124698,
    "number": 5853,
    "title": "validates_uniqueness_of admits duplicate nil values?",
    "user": {
      "login": "JulianKniephoff",
      "id": 123272,
      "avatar_url": "https://secure.gravatar.com/avatar/3fbe522532072c0ba130079efd220d19?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "3fbe522532072c0ba130079efd220d19",
      "url": "https://api.github.com/users/JulianKniephoff",
      "html_url": "https://github.com/JulianKniephoff",
      "followers_url": "https://api.github.com/users/JulianKniephoff/followers",
      "following_url": "https://api.github.com/users/JulianKniephoff/following",
      "gists_url": "https://api.github.com/users/JulianKniephoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JulianKniephoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JulianKniephoff/subscriptions",
      "organizations_url": "https://api.github.com/users/JulianKniephoff/orgs",
      "repos_url": "https://api.github.com/users/JulianKniephoff/repos",
      "events_url": "https://api.github.com/users/JulianKniephoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JulianKniephoff/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": {
      "login": "drogus",
      "id": 5004,
      "avatar_url": "https://secure.gravatar.com/avatar/582034b63279abeaa8e76acf12f5ee30?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "582034b63279abeaa8e76acf12f5ee30",
      "url": "https://api.github.com/users/drogus",
      "html_url": "https://github.com/drogus",
      "followers_url": "https://api.github.com/users/drogus/followers",
      "following_url": "https://api.github.com/users/drogus/following",
      "gists_url": "https://api.github.com/users/drogus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drogus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drogus/subscriptions",
      "organizations_url": "https://api.github.com/users/drogus/orgs",
      "repos_url": "https://api.github.com/users/drogus/repos",
      "events_url": "https://api.github.com/users/drogus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drogus/received_events",
      "type": "User"
    },
    "milestone": null,
    "comments": 6,
    "created_at": "2012-04-15T17:09:58Z",
    "updated_at": "2013-03-09T17:40:16Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "Let's assume we have the following simple ActiveRecord model\r\n\r\n```ruby\r\nclass Foo < ActiveRecord::Base\r\n  validates_uniqueness_of :name\r\nend\r\n```\r\n\r\nwith an attribute `name`.\r\n\r\nIn Rails 3.0 I could not create two records with an empty name like this:\r\n\r\n```\r\nFoo.create!\r\nFoo.create!\r\n```\r\n\r\nwhich is expected, since we have a duplicate for the `name` attribute; namely `nil`.\r\n\r\nHowever, since around Rails 3.1 the same code does not fail. Is this intended? The validation still works as expected for duplicate values other than `nil`."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5738",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5738/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5738/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5738/events",
    "html_url": "https://github.com/rails/rails/issues/5738",
    "id": 3976894,
    "number": 5738,
    "title": "ActiveRecord: abstract_mysql_adapter and charset",
    "user": {
      "login": "guillaumerose",
      "id": 172624,
      "avatar_url": "https://secure.gravatar.com/avatar/5445ea0a1c133f2a47864ca0766d9071?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "5445ea0a1c133f2a47864ca0766d9071",
      "url": "https://api.github.com/users/guillaumerose",
      "html_url": "https://github.com/guillaumerose",
      "followers_url": "https://api.github.com/users/guillaumerose/followers",
      "following_url": "https://api.github.com/users/guillaumerose/following",
      "gists_url": "https://api.github.com/users/guillaumerose/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/guillaumerose/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/guillaumerose/subscriptions",
      "organizations_url": "https://api.github.com/users/guillaumerose/orgs",
      "repos_url": "https://api.github.com/users/guillaumerose/repos",
      "events_url": "https://api.github.com/users/guillaumerose/events{/privacy}",
      "received_events_url": "https://api.github.com/users/guillaumerose/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 8,
    "created_at": "2012-04-04T19:27:16Z",
    "updated_at": "2012-11-11T23:20:27Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "Hi,\r\n\r\nUsing mysql2 gem and activerecord, some queries fail. I may have troubles with my MySQL (misencoded values, double utf-8 encode, etc) but I don't know where is the problem.\r\n\r\nHere is the stacktrace :\r\n\r\n\t\tArgumentError - invalid byte sequence in UTF-8:\r\n\t\t  /var/www/api/shared/bundle/ruby/1.9.1/gems/activerecord-3.2.3/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:246:in `split'\r\n\t\t  /var/www/api/shared/bundle/ruby/1.9.1/gems/activerecord-3.2.3/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:246:in `rescue in execute'\r\n\t\t  /var/www/api/shared/bundle/ruby/1.9.1/gems/activerecord-3.2.3/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:240:in `execute'\r\n\t\t  /var/www/api/shared/bundle/ruby/1.9.1/gems/activerecord-3.2.3/lib/active_record/connection_adapters/mysql2_adapter.rb:211:in `execute'\r\n\t\t  /var/www/api/shared/bundle/ruby/1.9.1/gems/activerecord-3.2.3/lib/active_record/connection_adapters/mysql2_adapter.rb:215:in `exec_query'\r\n\t\t  /var/www/api/shared/bundle/ruby/1.9.1/gems/activerecord-3.2.3/lib/active_record/connection_adapters/mysql2_adapter.rb:224:in `select'\r\n\t\t  /var/www/api/shared/bundle/ruby/1.9.1/gems/activerecord-3.2.3/lib/active_record/connection_adapters/abstract/database_statements.rb:18:in `select_all'\r\n\t\t  /var/www/api/shared/bundle/ruby/1.9.1/gems/activerecord-3.2.3/lib/active_record/connection_adapters/abstract/query_cache.rb:63:in `select_all'\r\n\t\t  /var/www/api/shared/bundle/ruby/1.9.1/gems/activerecord-3.2.3/lib/active_record/querying.rb:38:in `block in find_by_sql'\r\n\r\n\r\nFrom Gemfile.lock:\r\n\r\n    rails (3.2.3)\r\n      actionmailer (= 3.2.3)\r\n      actionpack (= 3.2.3)\r\n      activerecord (= 3.2.3)\r\n      activeresource (= 3.2.3)\r\n      activesupport (= 3.2.3)\r\n      bundler (~> 1.0)\r\n      railties (= 3.2.3)\r\n    mysql2 (0.3.11)\r\n\r\nMySQL server encoding: UTF-8 Unicode (utf8)\r\nTables encoding: latin1_swedish_ci\r\nData inserted with charset utf-8\r\n\r\nI know that I should fix this but I think the error message should be a little bit better. Why only some queries fail ?\r\n\r\nThanks,\r\nGuillaume"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5717",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5717/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5717/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5717/events",
    "html_url": "https://github.com/rails/rails/issues/5717",
    "id": 3945178,
    "number": 5717,
    "title": "Querying through associations doesn't set inverse instance when using extra scopes",
    "user": {
      "login": "pixeltrix",
      "id": 6321,
      "avatar_url": "https://secure.gravatar.com/avatar/b14001f2b40640dd6cb63f0e8f1f4869?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "b14001f2b40640dd6cb63f0e8f1f4869",
      "url": "https://api.github.com/users/pixeltrix",
      "html_url": "https://github.com/pixeltrix",
      "followers_url": "https://api.github.com/users/pixeltrix/followers",
      "following_url": "https://api.github.com/users/pixeltrix/following",
      "gists_url": "https://api.github.com/users/pixeltrix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pixeltrix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pixeltrix/subscriptions",
      "organizations_url": "https://api.github.com/users/pixeltrix/orgs",
      "repos_url": "https://api.github.com/users/pixeltrix/repos",
      "events_url": "https://api.github.com/users/pixeltrix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pixeltrix/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": {
      "login": "jonleighton",
      "id": 1979,
      "avatar_url": "https://secure.gravatar.com/avatar/2940bc7d4506f3e099e3dcc32a412b98?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "2940bc7d4506f3e099e3dcc32a412b98",
      "url": "https://api.github.com/users/jonleighton",
      "html_url": "https://github.com/jonleighton",
      "followers_url": "https://api.github.com/users/jonleighton/followers",
      "following_url": "https://api.github.com/users/jonleighton/following",
      "gists_url": "https://api.github.com/users/jonleighton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonleighton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonleighton/subscriptions",
      "organizations_url": "https://api.github.com/users/jonleighton/orgs",
      "repos_url": "https://api.github.com/users/jonleighton/repos",
      "events_url": "https://api.github.com/users/jonleighton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonleighton/received_events",
      "type": "User"
    },
    "milestone": null,
    "comments": 15,
    "created_at": "2012-04-03T13:54:02Z",
    "updated_at": "2013-04-10T19:22:56Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "Given the following models:\r\n\r\n``` ruby\r\nclass Manufacturer < ActiveRecord::Base\r\n  has_many :products, :inverse_of => :manufacturer\r\nend\r\n\r\nclass Product < ActiveRecord::Base\r\n  belongs_to :manufacturer, :inverse_of :products\r\n\r\n  def self.by_name\r\n    order(:name)\r\n  end\r\nend\r\n```\r\n\r\nthen trying to access the manufacturer of a product queried through the assoication only works without the extra query in a single case:\r\n\r\n``` irb\r\n>> Manufacturer.first.products.to_a.first.manufacturer\r\n```\r\n``` sql\r\nSELECT `manufacturers`.* FROM `manufacturers` LIMIT 1\r\nSELECT `products`.* FROM `products` WHERE `products`.`manufacturer_id` = 1\r\n```\r\n\r\nall other cases result in a extra query:\r\n\r\n``` irb\r\n>> Manufacturer.first.products.first.manufacturer\r\n```\r\n``` sql\r\nSELECT `manufacturers`.* FROM `manufacturers` LIMIT 1\r\nSELECT `products`.* FROM `products` WHERE `products`.`manufacturer_id` = 1 LIMIT 1\r\nSELECT `manufacturers`.* FROM `manufacturers` WHERE `manufacturers`.`id` = 1 LIMIT 1\r\n```\r\n\r\nThis is because the scope created from `first`, `order`, etc. has no knowledge of the association. Firstly this is surprising unless you're fairly intimate with AR internals and secondly to workaround the problem you end up making multiple associations, e.g:\r\n\r\n``` ruby\r\nclass Manufacturer < ActiveRecord::Base\r\n  has_many :products, :inverse_of => :manufacturer\r\n  has_many :sorted_products, :order => 'products.name', :inverse_of => :manufacturer\r\nend\r\n```\r\n\r\nWe should be able to pass the association information into the scope and have `AR::Relation` set the inverse instance in `AR::Relation#to_a`.\r\n\r\n@jonleighton what do you think?"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5701",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5701/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5701/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5701/events",
    "html_url": "https://github.com/rails/rails/issues/5701",
    "id": 3926375,
    "number": 5701,
    "title": "Uniq has_many :through with default_scope order does not work with PostgreSQL",
    "user": {
      "login": "codez",
      "id": 271590,
      "avatar_url": "https://secure.gravatar.com/avatar/319fd052917295138ff2249b60f81540?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "319fd052917295138ff2249b60f81540",
      "url": "https://api.github.com/users/codez",
      "html_url": "https://github.com/codez",
      "followers_url": "https://api.github.com/users/codez/followers",
      "following_url": "https://api.github.com/users/codez/following",
      "gists_url": "https://api.github.com/users/codez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codez/subscriptions",
      "organizations_url": "https://api.github.com/users/codez/orgs",
      "repos_url": "https://api.github.com/users/codez/repos",
      "events_url": "https://api.github.com/users/codez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codez/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 11,
    "created_at": "2012-04-02T13:32:48Z",
    "updated_at": "2013-03-18T01:08:05Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "Given these models:\r\n\r\n```ruby\r\nclass Tracker < ActiveRecord::Base\r\n  has_many :issues\r\n  has_many :categories, :through => :issues, :uniq => true\r\nend\r\n\r\nclass Issue < ActiveRecord::Base\r\n  belongs_to :tracker\r\n  belongs_to :category\r\n  default_scope order(:number)\r\nend\r\n\r\nclass Category < ActiveRecord::Base\r\n  has_many :issues\r\n  default_scope order(:name)\r\nend\r\n```\r\n\r\nWhen calling `tracker.categories`, on PostgreSQL, this fails with the following error:\r\n\r\n```\r\nActiveRecord::StatementInvalid: PG::Error: ERROR:  for SELECT DISTINCT, ORDER BY expressions must appear in select list\r\n\r\nSELECT DISTINCT \"categories\".* FROM \"categories\" INNER JOIN \"issues\" ON \"categories\".\"id\" = \"issue\".\"category_id\" WHERE \"issue\".\"tracker_id\" = 42 ORDER BY number, name\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5671",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5671/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5671/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5671/events",
    "html_url": "https://github.com/rails/rails/issues/5671",
    "id": 3899683,
    "number": 5671,
    "title": "Counter cache columns inconsistently marked read-only",
    "user": {
      "login": "al2o3cr",
      "id": 1191,
      "avatar_url": "https://secure.gravatar.com/avatar/6883e5ef03484d4fcef507d7b4f1d243?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "6883e5ef03484d4fcef507d7b4f1d243",
      "url": "https://api.github.com/users/al2o3cr",
      "html_url": "https://github.com/al2o3cr",
      "followers_url": "https://api.github.com/users/al2o3cr/followers",
      "following_url": "https://api.github.com/users/al2o3cr/following",
      "gists_url": "https://api.github.com/users/al2o3cr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/al2o3cr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/al2o3cr/subscriptions",
      "organizations_url": "https://api.github.com/users/al2o3cr/orgs",
      "repos_url": "https://api.github.com/users/al2o3cr/repos",
      "events_url": "https://api.github.com/users/al2o3cr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/al2o3cr/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2012-03-30T15:27:20Z",
    "updated_at": "2013-03-16T22:36:20Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "The documentation for the `counter_cache` option of `belongs_to` mentions that the cache attribute will be marked as read-only. Unfortunately, this doesn't happen when classes declaring `belongs_to` load before the class that declares `has_many`.\r\n\r\nA quick example:\r\n\r\n```ruby\r\n# in app/models/comment.rb\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :post, counter_cache: true\r\nend\r\n\r\n# in app/models/post.rb\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\n  has_many :recommendations\r\nend\r\n\r\n# in app/models/recommendation.rb\r\nclass Recommendation < ActiveRecord::Base\r\n  belongs_to :post, counter_cache: true\r\nend\r\n\r\n# with config.threadsafe! to preload all classes:\r\nPost.readonly_attributes # => #<Set: {\"recommendations_count\"}>\r\n\r\n# without preloading, the results vary depending on which classes are autoloaded first:\r\nPost; Comment; Recommendation; Post.readonly_attributes # => #<Set: {\"comments_count\", \"recommendations_count\"}>\r\n# BUT, in a fresh session:\r\nRecommendation; Post; Comment; Post.readonly_attributes # => #<Set: {\"comments_count\"}>\r\n# or even: \r\nRecommendation; Comment; Post; Post.readonly_attributes # => []\r\n```\r\n\r\nThe relevant line is here:\r\nhttps://github.com/rails/rails/blob/3-2-stable/activerecord/lib/active_record/associations/builder/belongs_to.rb#L42\r\n\r\nCouple questions on this:\r\n\r\n* is this a bug? It certainly seems like one - if the intention is to block modification of the count, the existing code is unreliable (especially in development mode, when loading roulette is played on every request).\r\n\r\n* what's a good way to test this?\r\n\r\n* what about polymorphic associations? They currently never get an `attr_readonly`, although counter caches do work."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5588",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5588/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5588/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5588/events",
    "html_url": "https://github.com/rails/rails/issues/5588",
    "id": 3811171,
    "number": 5588,
    "title": "Using :group with #count generating bad SQL on Postgres",
    "user": {
      "login": "twinturbo",
      "id": 48928,
      "avatar_url": "https://secure.gravatar.com/avatar/877677f3c0cc6f8822a57b6732933d31?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "877677f3c0cc6f8822a57b6732933d31",
      "url": "https://api.github.com/users/twinturbo",
      "html_url": "https://github.com/twinturbo",
      "followers_url": "https://api.github.com/users/twinturbo/followers",
      "following_url": "https://api.github.com/users/twinturbo/following",
      "gists_url": "https://api.github.com/users/twinturbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/twinturbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/twinturbo/subscriptions",
      "organizations_url": "https://api.github.com/users/twinturbo/orgs",
      "repos_url": "https://api.github.com/users/twinturbo/repos",
      "events_url": "https://api.github.com/users/twinturbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/twinturbo/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2012-03-26T15:59:21Z",
    "updated_at": "2013-02-10T02:38:13Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "Here is a call to `scoped`:\r\n\r\n```ruby\r\nscoped({:select=>nil,\r\n :joins=>\r\n  \"JOIN taggings activities_taggings_4ce995f  ON activities_taggings_4ce995f.taggable_id = activities.id AND activities_taggings_4ce995f.taggable_type = 'Activity' AND activities_taggings_4ce995f.tag_id = 2 JOIN taggings activities_taggings_58b7315  ON activities_taggings_58b7315.taggable_id = activities.id AND activities_taggings_58b7315.taggable_type = 'Activity' AND activities_taggings_58b7315.tag_id = 3 LEFT OUTER JOIN taggings activities_taggings_group  ON activities_taggings_group.taggable_id = activities.id AND activities_taggings_group.taggable_type = 'Activity'\",\r\n :group=>\r\n  \"activities.id, activities.reference_id, activities.reference_type, activities.account_id, activities.owner_id, activities.owner_type, activities.created_at, activities.updated_at, activities.timestamp HAVING COUNT(activities_taggings_group.taggable_id) = 2\",\r\n :conditions=>\"\",\r\n :order=>nil,\r\n :readonly=>false})\r\n```\r\n\r\nHere it the error:\r\n\r\n```ActiveRecord::StatementInvalid:\r\n       PG::Error: ERROR:  syntax error at or near \"AS\"\r\n       LINE 1: ... COUNT(activities_taggings_group.taggable_id) = 2 AS activit...\r\n                                                                    ^\r\n       : SELECT COUNT(*) AS count_all, activities.id, activities.reference_id, activities.reference_type, activities.account_id, activities.owner_id, activities.owner_type, activities.created_at, activities.updated_at, activities.timestamp HAVING COUNT(activities_taggings_group.taggable_id) = 2 AS activities_id_activities_reference_id_activities_reference_type FROM \"activities\" JOIN taggings activities_taggings_4ce995f  ON activities_taggings_4ce995f.taggable_id = activities.id AND activities_taggings_4ce995f.taggable_type = 'Activity' AND activities_taggings_4ce995f.tag_id = 2 JOIN taggings activities_taggings_58b7315  ON activities_taggings_58b7315.taggable_id = activities.id AND activities_taggings_58b7315.taggable_type = 'Activity' AND activities_taggings_58b7315.tag_id = 3 LEFT OUTER JOIN taggings activities_taggings_group  ON activities_taggings_group.taggable_id = activities.id AND activities_taggings_group.taggable_type = 'Activity' WHERE \"activities\".\"reference_id\" = 1 AND \"activities\".\"reference_type\" = 'CallList' GROUP BY activities.id, activities.reference_id, activities.reference_type, activities.account_id, activities.owner_id, activities.owner_type, activities.created_at, activities.updated_at, activities.timestamp HAVING COUNT(activities_taggings_group.taggable_id) = 2\r\n```\r\n\r\nHere is the query formatted nicely:\r\n\r\n```sql\r\nSELECT COUNT(*) \r\n  AS count_all, activities.id, activities.reference_id, \r\n    activities.reference_type, activities.account_id, \r\n    activities.owner_id, activities.owner_type, activities.created_at, \r\n    activities.updated_at, activities.timestamp \r\nHAVING COUNT(activities_taggings_group.taggable_id) = 2 AS activities_id_activities_reference_id_activities_reference_type \r\nFROM \"activities\" \r\nJOIN taggings activities_taggings_a00c683 \r\n  ON activities_taggings_a00c683.taggable_id = activities.id\r\n    AND activities_taggings_a00c683.taggable_type = 'Activity' \r\n    AND activities_taggings_a00c683.tag_id = 2 \r\nJOIN taggings activities_taggings_0980a52 \r\n  ON activities_taggings_0980a52.taggable_id = activities.id \r\n  AND activities_taggings_0980a52.taggable_type = 'Activity' \r\n  AND activities_taggings_0980a52.tag_id = 3 \r\nLEFT OUTER JOIN taggings activities_taggings_group\r\n  ON activities_taggings_group.taggable_id = activities.id\r\n  AND activities_taggings_group.taggable_type = 'Activity' \r\nGROUP BY \r\n  activities.id, activities.reference_id, activities.reference_type, \r\n  activities.account_id, activities.owner_id, activities.owner_type, \r\n  activities.created_at, activities.updated_at, activities.timestamp \r\nHAVING COUNT(activities_taggings_group.taggable_id) = 2\r\n```\r\n\r\n**TL;DR**: rails adds `HAVING COUNT` to the select clause and postgres blows up."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5554",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5554/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5554/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5554/events",
    "html_url": "https://github.com/rails/rails/issues/5554",
    "id": 3772368,
    "number": 5554,
    "title": "#count doesn't honor distinct attributes in select clause",
    "user": {
      "login": "mtalcott",
      "id": 354599,
      "avatar_url": "https://secure.gravatar.com/avatar/7b43c562e3ca6b0b9898bee0fdcdde86?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "7b43c562e3ca6b0b9898bee0fdcdde86",
      "url": "https://api.github.com/users/mtalcott",
      "html_url": "https://github.com/mtalcott",
      "followers_url": "https://api.github.com/users/mtalcott/followers",
      "following_url": "https://api.github.com/users/mtalcott/following",
      "gists_url": "https://api.github.com/users/mtalcott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mtalcott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mtalcott/subscriptions",
      "organizations_url": "https://api.github.com/users/mtalcott/orgs",
      "repos_url": "https://api.github.com/users/mtalcott/repos",
      "events_url": "https://api.github.com/users/mtalcott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mtalcott/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 14,
    "created_at": "2012-03-22T22:37:46Z",
    "updated_at": "2013-04-04T07:48:24Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "Calling `count` on an ActiveRecord::Relation with more than 1 distinct attribute in the select clause doesn't honor the select conditions.  For example, this works:\r\n\r\n```ruby\r\nUser.select('distinct username').all    #=> SELECT distinct username FROM \"users\"\r\nUser.select('distinct username').count  #=> SELECT COUNT(distinct username) FROM \"users\"\r\n```\r\nHowever, the distinct clause disappears from the count SQL when another distinct attribute is specified:\r\n\r\n```ruby\r\nUser.select('distinct username, email').all     #=> SELECT distinct username, email FROM \"users\"\r\nUser.select('distinct username, email').count   #=> SELECT count(*) FROM \"users\"\r\n```\r\nSame thing with `distinct users.*`:\r\n\r\n```ruby\r\nUser.select('distinct users.*').all     #=> SELECT distinct users.* FROM \"users\"\r\nUser.select('distinct users.*').count   #=> SELECT count(*) FROM \"users\"\r\n```\r\nThat means for a relation with multiple distinct columns, `relation.count` is not necessarily the same as `relation.all.count`.\r\n\r\nFor `distinct users.*`, `count(:distinct => true)` works (it generates `SELECT COUNT(DISTINCT \"users\".\"id\") FROM \"users\"`), but that won't work for `distinct username, email`.\r\n\r\nI've verified this behavior on Postgres and SQLite."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5491",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5491/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5491/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5491/events",
    "html_url": "https://github.com/rails/rails/issues/5491",
    "id": 3698167,
    "number": 5491,
    "title": "connection pool: undefined method `in_use?'",
    "user": {
      "login": "plentz",
      "id": 4867,
      "avatar_url": "https://secure.gravatar.com/avatar/6765ba9f85d8ac2d99725c347eadc023?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "6765ba9f85d8ac2d99725c347eadc023",
      "url": "https://api.github.com/users/plentz",
      "html_url": "https://github.com/plentz",
      "followers_url": "https://api.github.com/users/plentz/followers",
      "following_url": "https://api.github.com/users/plentz/following",
      "gists_url": "https://api.github.com/users/plentz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plentz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plentz/subscriptions",
      "organizations_url": "https://api.github.com/users/plentz/orgs",
      "repos_url": "https://api.github.com/users/plentz/repos",
      "events_url": "https://api.github.com/users/plentz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plentz/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 36,
    "created_at": "2012-03-18T04:11:42Z",
    "updated_at": "2013-03-29T00:39:09Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "under heavy load(running apache benchmark), I saw a lot of stacktraces like this one. Maybe it's worth mentioning that I'm using Jruby.\r\n\r\nhttps://gist.github.com/2068742"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5476",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5476/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5476/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5476/events",
    "html_url": "https://github.com/rails/rails/issues/5476",
    "id": 3689912,
    "number": 5476,
    "title": "Nested attributes with callbacks bugfix",
    "user": {
      "login": "tandem-softworks",
      "id": 1497057,
      "avatar_url": "https://secure.gravatar.com/avatar/34a16f98f4ba99dcb241c8ddb3a5446c?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "34a16f98f4ba99dcb241c8ddb3a5446c",
      "url": "https://api.github.com/users/tandem-softworks",
      "html_url": "https://github.com/tandem-softworks",
      "followers_url": "https://api.github.com/users/tandem-softworks/followers",
      "following_url": "https://api.github.com/users/tandem-softworks/following",
      "gists_url": "https://api.github.com/users/tandem-softworks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tandem-softworks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tandem-softworks/subscriptions",
      "organizations_url": "https://api.github.com/users/tandem-softworks/orgs",
      "repos_url": "https://api.github.com/users/tandem-softworks/repos",
      "events_url": "https://api.github.com/users/tandem-softworks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tandem-softworks/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 20,
    "created_at": "2012-03-16T21:44:54Z",
    "updated_at": "2013-04-15T21:38:11Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/5476",
      "diff_url": "https://github.com/rails/rails/pull/5476.diff",
      "patch_url": "https://github.com/rails/rails/pull/5476.patch"
    },
    "body": "I discovered a bug in the nested attributes assignment: It occurs when\r\nan association callback changes the \"loaded-ness\" of the association\r\nduring the assignment. After association.loaded? changes from false to\r\ntrue, the destroy flag fails to function. The first commit illustrates\r\nthe issue with a unit test. The test fails in the master branch -\r\ncherry-picked to 3-2-stable, 3-1-stable, 3-0-stable fails the same way.\r\n\r\nThe second commit is the suggested fix. It replaces a section that\r\npreviously addressed the same issue of recognizing if a record was\r\nalready in the proxy_target array. When it wasn't, it called\r\nadd_to_target, which in turn calls the before_add callback. IMO this is\r\nnot correct, because the record concerned already exists in the database\r\nas part of the association. The documentation of the callback states\r\nthat an exception may be raised to prevent the record from being added\r\nto the association which contradicts the fact. Therefore I just plainly\r\nappended the record to the proxy_target array. (The unit test in the\r\nfirst commit pins down this behaviour). The fix is tested on sqlite on\r\nmaster, 3-2-stable, 3-1-stable. The fix to 3-0-stable is slightly\r\ndifferent, so there is another pull request off of branch\r\nnested_attributes_with_callbacks_bug_3-0 (if I manage to create one...).\r\n\r\nConsidering the whole method\r\nassign_nested_attributes_for_collection_association - it almost\r\nexclusively calls methods on the association and its logic is deeply\r\nentangled with the implmentation details of the CollectionAssociation\r\nclass. I've seen some effort to augment the responsibilites of the\r\nassociation classes, which IMO points in the right direction. A next\r\nstep to clear up this spot would be to move the main part of the method\r\nto something like \"CollectionAssociation.attributes=\" - any comments!?\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5462",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5462/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5462/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5462/events",
    "html_url": "https://github.com/rails/rails/issues/5462",
    "id": 3677733,
    "number": 5462,
    "title": "ActiveRecord deep :through association on new records with existing reference not working as expected.",
    "user": {
      "login": "veloper",
      "id": 340358,
      "avatar_url": "https://secure.gravatar.com/avatar/1e181d26bda25e0718991c115f4a7177?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "1e181d26bda25e0718991c115f4a7177",
      "url": "https://api.github.com/users/veloper",
      "html_url": "https://github.com/veloper",
      "followers_url": "https://api.github.com/users/veloper/followers",
      "following_url": "https://api.github.com/users/veloper/following",
      "gists_url": "https://api.github.com/users/veloper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/veloper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/veloper/subscriptions",
      "organizations_url": "https://api.github.com/users/veloper/orgs",
      "repos_url": "https://api.github.com/users/veloper/repos",
      "events_url": "https://api.github.com/users/veloper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/veloper/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/needs+feedback",
        "name": "needs feedback",
        "color": "ededed"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2012-03-16T05:01:37Z",
    "updated_at": "2012-11-27T20:14:43Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "First bug report, hopefully this is enough information.\n\n# Bug Description\nCreating a __new__ record with (at least) a 3 level deep `:through` based association with an assigned __existing record__ causes unexpected behavior and puzzling debugging results.\n\n## Models & Associations & Some Code\n\n    Bookmark\n        belongs_to :uri\n        has_many :scrapes,   :through => :uri\n        has_many :documents, :through => :scrapes\n\n    Uri\n      has_many :scrapes\n      has_many :bookmarks\n\n    class Scrape < ActiveRecord::Base\n      belongs_to :uri\n      has_one :document\n\n      before_save :scrape!\n\n      def scrape!\n        response = Typhoeus::Request.get uri.uri, {\n          :timeout         => 4000,\n          :follow_location => true,\n          :headers         => { :Accept  => \"text/html\" }\n        }\n        \n        ### some code to store information about the scrape attempt ###\n  \n        # Success\n        build_document(:html => response.body) if response.success?\n      end\n    end\n\n    Document\n      belongs_to :scrape\n\n## Reproducible Code\n\n    # Find or Create the Uri record. (The Existing Reference)\n    @uri = Uri.find_or_create_by_raw(\"http://example.com\")\n    @uri.scrapes.create! # Also creates the Document association\n\n    # Create a new bookmark with the existing uri reference\n    @bookmark = Bookmark.new |r|\n        r.uri = @uri\n    end\n\n### Further alternatives that produce the same results as below\n\n    # Procedural \n    @bookmark = Bookmark.new\n    @bookmark.uri = @uri\n\n    # Built from existing Uri scope\n    @bookmark = @uri.bookmarks.new\n\n    # Built using .build from existing Uri scope\n    @bookmark = @uri.bookmarks.build\n\n\n## What is Expected\n    @bookmark.documents # Array with 1 element (An instantiated Document model object)\n\n## What Happens (aka The Bug?)\n     @bookmark.documents # -> []  (an empty array)\n\n## Debugging Efforts & Findings\nView all code examples from this point on as continuation of the __Reproducible Code__ example above.\n\n### The following works as expected...\n\n    @bookmark.scrapes # Array of 1 element (An instantiated Scrape model object)\n    @bookmark.uri.scrapes.first.document #  An instantiated Document model object\n\n### Let's try using `to_sql`\n\n    @bookmark.documents.to_sql \n    # -> \"SELECT `documents`.* FROM `documents` INNER JOIN `scrapes` ON `documents`.`scrape_id` = `scrapes`.`id` INNER JOIN `uris` ON `scrapes`.`uri_id` = `uris`.`id` WHERE `uris`.`id` = 1\" \n\nRan from the CLI  - __the expected result set is returned__\n\n### Ok, well the SQL is valid, let try using `.all`\n\n    @bookmark.documents.all # -> Array with 1 element (An instantiated Document model object)\n\nWell, that __worked__. Maybe that did the trick? Was the association fixed as a result?\n\n    @bookmark.documents # -> []  (an empty array)\n\n__Nope__, still an empty array.\n\n### Lets try calling `reload` on the bookmark (even though it's new, with no :id)\n    \n    @bookmark.reload -> ActiveRecord::RecordNotFound: Couldn't find Bookmark without an ID\n\nOk, well that was a long shot anyway, but it was attempted in debugging (for the record)\n\n\n### Fine, lets `save!` it, then try again.\n\n    @bookmark.save! # Success! (with id => 1)\n    @bookmark.documents # -> []  (an empty array)\n\n__Nope__, empty!  I must have setup the relationships wrong, right? Well, no it's right, check this out...\n\n    @bookmark.reload\n    @bookmark.documents # -> Array with 1 element (An instantiated Document model object)\n\n    # or\n\n    @existing_bookmark = Bookmark.find(1)\n    @existing_bookmark.documents # -> Array with 1 element (An instantiated Document model object)\n\nAs you can see reloading the model after save or fetching the existing record makes the association __work as expected__.\n\nI'm not sure if this is a bug, but at the very least I thought I might document my findings here.\n    \n# Environment\n* Mac OS X 10.6.8\n* rvm 1.0.14 \n* ruby-1.9.2-p0\n* Rails 3.2\n* MySQL using mysql2 gem"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5303",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5303/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5303/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5303/events",
    "html_url": "https://github.com/rails/rails/issues/5303",
    "id": 3526329,
    "number": 5303,
    "title": "Problems serializing ActiveRecord::Relation to_yaml",
    "user": {
      "login": "tadast",
      "id": 218239,
      "avatar_url": "https://secure.gravatar.com/avatar/bd9b6d9f929adbf8918fe37fb279c43e?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "bd9b6d9f929adbf8918fe37fb279c43e",
      "url": "https://api.github.com/users/tadast",
      "html_url": "https://github.com/tadast",
      "followers_url": "https://api.github.com/users/tadast/followers",
      "following_url": "https://api.github.com/users/tadast/following",
      "gists_url": "https://api.github.com/users/tadast/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tadast/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tadast/subscriptions",
      "organizations_url": "https://api.github.com/users/tadast/orgs",
      "repos_url": "https://api.github.com/users/tadast/repos",
      "events_url": "https://api.github.com/users/tadast/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tadast/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2012-03-06T15:58:44Z",
    "updated_at": "2012-12-11T17:38:10Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "Hi all,\r\n\r\nI faced a problem serializing ActiveRecord Relations in hashes:\r\n\r\n    >> {a: User.where(initials: 'TT')}.to_yaml\r\n    => FAILS\r\n\r\nAs a workaround I convert the relation to an array\r\n\r\n    >> {a: User.where(initials: 'TT').all}.to_yaml\r\n    => GREAT SUCCESS \r\n\r\nHappens with syck as well\r\n\r\n    >> YAML::ENGINE.yamler = 'syck'\r\n    => \"syck\"\r\n\r\n    >> {a: User.where(initials: 'TT')}.to_yaml\r\n    >> FAILS\r\n\r\nNot sure how to handle it best? Maybe forcing #to_a in ActiveRecord::Relation#to_yaml just like #as_json does?\r\n\r\nThe full console output with stacktraces is here: https://gist.github.com/acc75942606bd8dd6063"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5223",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5223/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5223/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5223/events",
    "html_url": "https://github.com/rails/rails/issues/5223",
    "id": 3443840,
    "number": 5223,
    "title": "RemoteIp middleware trusted proxies config does not affect Rack::Request::trusted_proxy?",
    "user": {
      "login": "courtland",
      "id": 12778,
      "avatar_url": "https://secure.gravatar.com/avatar/d6972cb84a97a2457c0744b34dc685cf?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "d6972cb84a97a2457c0744b34dc685cf",
      "url": "https://api.github.com/users/courtland",
      "html_url": "https://github.com/courtland",
      "followers_url": "https://api.github.com/users/courtland/followers",
      "following_url": "https://api.github.com/users/courtland/following",
      "gists_url": "https://api.github.com/users/courtland/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/courtland/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/courtland/subscriptions",
      "organizations_url": "https://api.github.com/users/courtland/orgs",
      "repos_url": "https://api.github.com/users/courtland/repos",
      "events_url": "https://api.github.com/users/courtland/events{/privacy}",
      "received_events_url": "https://api.github.com/users/courtland/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionpack",
        "name": "actionpack",
        "color": "FFF700"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2012-02-29T20:43:11Z",
    "updated_at": "2012-09-12T15:21:25Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "I have clients that connect to my rails app from a private IP address, where the clients real IP is presented to rails via the X-Forwarded-For header (Thin cluster behind a pound load balancer). By default, rails assumes these private addresses are \"trusted proxies\", which causes Request#remote_ip to return '127.0.0.1'.\r\n\r\nThis was somewhat addressed by pull request #2632 by making TRUSTED_PROXIES configurable in the RemoteIp Class.\r\n\r\nHowever, Rails::Rack::Logger methods still call Rack::Request#ip which causes the IP address displayed in my logs to be 127.0.0.1.\r\n\r\nBased on this change in rack: https://github.com/rack/rack/pull/192\r\nIt seems that ActionDispatch::Request should override Rack::Request#trusted_proxy? with the same \"trusted proxies\" that are configured for RemoteIp.\r\n\r\nAt the moment I have the following in an initializer to fix the problem for me, but it is obviously a really bad hack.\r\n```\r\nmodule Rack\r\n  class Request\r\n    def trusted_proxy?(ip)\r\n      ip =~ /^127\\.0\\.0\\.1$/\r\n    end\r\n  end\r\nend\r\n```\r\nDoes anyone have comments or suggestions otherwise? I can attempt a patch if my logic seems sound. Thanks.\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5147",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5147/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5147/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5147/events",
    "html_url": "https://github.com/rails/rails/issues/5147",
    "id": 3364705,
    "number": 5147,
    "title": "using dependent as destroy, destroy do not fails if associated objects fails the destroy",
    "user": {
      "login": "sobrinho",
      "id": 26460,
      "avatar_url": "https://secure.gravatar.com/avatar/c2dc9c02ce7a041285725a4fc9e5f6d2?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "c2dc9c02ce7a041285725a4fc9e5f6d2",
      "url": "https://api.github.com/users/sobrinho",
      "html_url": "https://github.com/sobrinho",
      "followers_url": "https://api.github.com/users/sobrinho/followers",
      "following_url": "https://api.github.com/users/sobrinho/following",
      "gists_url": "https://api.github.com/users/sobrinho/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sobrinho/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sobrinho/subscriptions",
      "organizations_url": "https://api.github.com/users/sobrinho/orgs",
      "repos_url": "https://api.github.com/users/sobrinho/repos",
      "events_url": "https://api.github.com/users/sobrinho/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sobrinho/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": {
      "login": "carlosantoniodasilva",
      "id": 26328,
      "avatar_url": "https://secure.gravatar.com/avatar/77237b97a465ae5a293ad323b7296837?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "77237b97a465ae5a293ad323b7296837",
      "url": "https://api.github.com/users/carlosantoniodasilva",
      "html_url": "https://github.com/carlosantoniodasilva",
      "followers_url": "https://api.github.com/users/carlosantoniodasilva/followers",
      "following_url": "https://api.github.com/users/carlosantoniodasilva/following",
      "gists_url": "https://api.github.com/users/carlosantoniodasilva/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carlosantoniodasilva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carlosantoniodasilva/subscriptions",
      "organizations_url": "https://api.github.com/users/carlosantoniodasilva/orgs",
      "repos_url": "https://api.github.com/users/carlosantoniodasilva/repos",
      "events_url": "https://api.github.com/users/carlosantoniodasilva/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carlosantoniodasilva/received_events",
      "type": "User"
    },
    "milestone": null,
    "comments": 20,
    "created_at": "2012-02-23T22:52:55Z",
    "updated_at": "2013-04-23T01:58:17Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "Example:\r\n\r\n``` ruby\r\nclass Category < ActiveRecord::Base\r\n  has_many :posts, :dependent => :destroy\r\nend\r\n```\r\n\r\n``` ruby\r\nclass Post < ActiveRecord::Base\r\n  belongs_to :category\r\n\r\n  # simulates a failure but using a callback\r\n  # will produce the same issue\r\n  def destroy\r\n    false\r\n  end\r\nend\r\n```\r\n\r\n``` ruby\r\nCategory.create!(:name => \"Category A\")\r\nPost.create!(:category => Category.first, :title => \"Post A\")\r\n\r\nCategory.first.destroy\r\n#=> #<Category id: 1, name: \"Category A\", created_at: \"2012-02-23 22:44:35\", updated_at: \"2012-02-23 22:44:35\">\r\n\r\nCategory.first\r\n#=> nil\r\n\r\nPost.first\r\n#=> #<Post id: 1, category_id: 1, title: \"Post A\", created_at: \"2012-02-23 22:44:49\", updated_at: \"2012-02-23 22:44:49\">\r\n```\r\n\r\nMy real scenario is a bit more complex due to foreign keys, dependent restrict and others models before the model that fails the destroy due to a complex restriction.\r\n\r\nAnyway, that code reproduce the issue :)"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5134",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5134/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5134/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5134/events",
    "html_url": "https://github.com/rails/rails/issues/5134",
    "id": 3346191,
    "number": 5134,
    "title": "Parent model not marked as invalid when associated record is invalid, but not dirty",
    "user": {
      "login": "mitio",
      "id": 129307,
      "avatar_url": "https://secure.gravatar.com/avatar/90793237d18f9c12460d11a2db4ee277?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "90793237d18f9c12460d11a2db4ee277",
      "url": "https://api.github.com/users/mitio",
      "html_url": "https://github.com/mitio",
      "followers_url": "https://api.github.com/users/mitio/followers",
      "following_url": "https://api.github.com/users/mitio/following",
      "gists_url": "https://api.github.com/users/mitio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitio/subscriptions",
      "organizations_url": "https://api.github.com/users/mitio/orgs",
      "repos_url": "https://api.github.com/users/mitio/repos",
      "events_url": "https://api.github.com/users/mitio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitio/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2012-02-22T21:04:04Z",
    "updated_at": "2013-04-17T09:11:31Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "### Summary\r\n\r\nIf we have a parent model and an associated collection, `valid?` on the parent may return `true` in some cases, even though at least one of the associated collection records is invalid (ie. has `errors` and its `valid?` returns `false`).\r\n\r\n### Tested on\r\n\r\nRails 3.2.1 and `3-2-stable`.\r\n\r\n### How to reproduce\r\n\r\nConsider the following code:\r\n\r\n\tclass Product < ActiveRecord::Base\r\n\t  has_many :prices\r\n\tend\r\n\r\n\tclass Price < ActiveRecord::Base\r\n\t  belongs_to :product\r\n\t  validates_numericality_of :price\r\n\tend\r\n\r\nThen, if we do:\r\n\r\n\tproduct = Product.create\r\n\tprice = product.prices.create price: 0\r\n\r\n\tprice.valid?   # => true\r\n\tproduct.valid? # => true\r\n\r\n\tprice.price = 'foo'\r\n\r\n\tprice.valid?   # => false\r\n\tproduct.valid? # => true but INCORRECT\r\n\r\n\tprice.errors.full_messages # => [\"Price is not a number\"]\r\n\tprice.changed?             # => false; notice: instance not marked as changed\r\n\r\nThe incorrect value of `product.valid?` is due to the fact that `price.changed?` is false and thus `product.valid?` does not check the `price` instance for validity. `price.changed?` is false, because `'foo'` gets type-casted to `0` and the price was already `0`.\r\n\r\nThis would not have happened if any of the following was true:\r\n\r\n* `price.price` was not `0`, but some other number\r\n* `price.changed?` was returning `true` due to other price fields having changed\r\n* `price.new_record?` was `true` (not `false`, as in our case)\r\n\r\n### Other possible implications\r\n\r\nThis issue could also affect:\r\n\r\n* Saving models which `accepts_nested_attributes_for :prices`, for example -- will work for new price records and prices which are not `0`, but validation won't work for existing price records wtih a `0` price.\r\n* Possibly custom validations in associated models which could be returning `false` without the model to be marked as `changed?`.\r\n\r\n### Offending code\r\n\r\n* [ActiveRecord::AutosaveAssociation#associated_records_to_validate_or_save](https://github.com/rails/rails/blob/3-2-stable/activerecord/lib/active_record/autosave_association.rb#L256), which boils down to:\r\n* [ActiveRecord::AutosaveAssociation#changed_for_autosave?](https://github.com/rails/rails/blob/3-2-stable/activerecord/lib/active_record/autosave_association.rb#L247)\r\n\r\n### Proposed solution\r\n\r\nOne solution I'm proposing can be found in #5135. I would love some feedback on this."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/5122",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/5122/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/5122/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/5122/events",
    "html_url": "https://github.com/rails/rails/issues/5122",
    "id": 3321813,
    "number": 5122,
    "title": "ENV['RAILS_RELATIVE_URL_ROOT'] and url_for",
    "user": {
      "login": "julian7",
      "id": 68158,
      "avatar_url": "https://secure.gravatar.com/avatar/0ca06bb6731c5e5c9883e1417ef10e2d?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "0ca06bb6731c5e5c9883e1417ef10e2d",
      "url": "https://api.github.com/users/julian7",
      "html_url": "https://github.com/julian7",
      "followers_url": "https://api.github.com/users/julian7/followers",
      "following_url": "https://api.github.com/users/julian7/following",
      "gists_url": "https://api.github.com/users/julian7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/julian7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/julian7/subscriptions",
      "organizations_url": "https://api.github.com/users/julian7/orgs",
      "repos_url": "https://api.github.com/users/julian7/repos",
      "events_url": "https://api.github.com/users/julian7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/julian7/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionpack",
        "name": "actionpack",
        "color": "FFF700"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 22,
    "created_at": "2012-02-21T21:32:36Z",
    "updated_at": "2013-04-25T18:19:20Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "I wanted to deploy a rails app into a subdirectory, and setting RAILS_RELATIVE_URL_ROOT env var works pretty well... except, it is not used in any REST-like route generation.\r\n\r\n```shell\r\nhoradrim:~/Code>>% rails new relative_url_root_test\r\nUsing -T --skip-bundle from /Users/js/.railsrc\r\n...\r\nhoradrim:~/Code>>% cd relative_url_root_test\r\nhoradrim:~/Code/relative_url_root_test>>% bundle --path vendor --binstubs\r\nFetching gem metadata from https://rubygems.org/.........\r\n...\r\nhoradrim:~/Code/relative_url_root_test>>% script/rails g scaffold page title:string body:text\r\n...\r\nhoradrim:~/Code/relative_url_root_test>>% bin/rake db:migrate\r\n...\r\nhoradrim:~/Code/relative_url_root_test>>% RAILS_RELATIVE_URL_ROOT=/subdir script/rails c\r\nLoading development environment (Rails 3.2.1)\r\nirb(main):001:0> app.url_for Page\r\n=> \"http://www.example.com/pages\"\r\n```\r\n\r\nShouldn't it be http://www.example.com/subdir/pages ?"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/4971",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/4971/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/4971/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/4971/events",
    "html_url": "https://github.com/rails/rails/issues/4971",
    "id": 3159316,
    "number": 4971,
    "title": "can't use fixtures with a created engine",
    "user": {
      "login": "viniciusgati",
      "id": 60268,
      "avatar_url": "https://secure.gravatar.com/avatar/dcf6cccdbca2194b2cfcf470d99096f2?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "dcf6cccdbca2194b2cfcf470d99096f2",
      "url": "https://api.github.com/users/viniciusgati",
      "html_url": "https://github.com/viniciusgati",
      "followers_url": "https://api.github.com/users/viniciusgati/followers",
      "following_url": "https://api.github.com/users/viniciusgati/following",
      "gists_url": "https://api.github.com/users/viniciusgati/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/viniciusgati/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/viniciusgati/subscriptions",
      "organizations_url": "https://api.github.com/users/viniciusgati/orgs",
      "repos_url": "https://api.github.com/users/viniciusgati/repos",
      "events_url": "https://api.github.com/users/viniciusgati/events{/privacy}",
      "received_events_url": "https://api.github.com/users/viniciusgati/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/engines",
        "name": "engines",
        "color": "e102d8"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 18,
    "created_at": "2012-02-09T16:25:27Z",
    "updated_at": "2013-03-19T14:19:14Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "hi all, i have trouble testing an engine\r\n\r\n```ruby\r\nrails plugin new something --full\r\n```\r\n\r\ni create an engine, and some models, then i started to test, on 'rake test' command i realized that the fixtures are not loaded, so as the helper methods to load fixtures like: \r\n\r\n```ruby\r\npeople(:one)\r\n```\r\n\r\nit is a bug or maybe i understand this wrong and I'm using it the wrong way?\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/4936",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/4936/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/4936/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/4936/events",
    "html_url": "https://github.com/rails/rails/issues/4936",
    "id": 3135384,
    "number": 4936,
    "title": "Freezing a cloned ActiveRecord object freezes the original too",
    "user": {
      "login": "MSch",
      "id": 7475,
      "avatar_url": "https://secure.gravatar.com/avatar/64afebe5db598b0b043f35560bf940df?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "64afebe5db598b0b043f35560bf940df",
      "url": "https://api.github.com/users/MSch",
      "html_url": "https://github.com/MSch",
      "followers_url": "https://api.github.com/users/MSch/followers",
      "following_url": "https://api.github.com/users/MSch/following",
      "gists_url": "https://api.github.com/users/MSch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MSch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MSch/subscriptions",
      "organizations_url": "https://api.github.com/users/MSch/orgs",
      "repos_url": "https://api.github.com/users/MSch/repos",
      "events_url": "https://api.github.com/users/MSch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MSch/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/bug",
        "name": "bug",
        "color": "444444"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2012-02-08T02:49:17Z",
    "updated_at": "2013-04-12T23:15:06Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "Steps to reproduce:\r\n\r\n    $ rails new testcase\r\n    $ cd testcase\r\n    $ rails g model SomeARModel\r\n    $ rake db:migrate\r\n    $ rails console\r\n    > a = SomeArModel.new\r\n    > b = a.clone\r\n    > b.freeze\r\n    > a.frozen? # => true, should be false\r\n\r\nOther ruby objects don't exhibit this behavior."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/4624",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/4624/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/4624/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/4624/events",
    "html_url": "https://github.com/rails/rails/issues/4624",
    "id": 2938823,
    "number": 4624,
    "title": "#except and #only with `default_scope`",
    "user": {
      "login": "antpaw",
      "id": 108543,
      "avatar_url": "https://secure.gravatar.com/avatar/014443228ec95795e9359bb239294dc1?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "014443228ec95795e9359bb239294dc1",
      "url": "https://api.github.com/users/antpaw",
      "html_url": "https://github.com/antpaw",
      "followers_url": "https://api.github.com/users/antpaw/followers",
      "following_url": "https://api.github.com/users/antpaw/following",
      "gists_url": "https://api.github.com/users/antpaw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antpaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antpaw/subscriptions",
      "organizations_url": "https://api.github.com/users/antpaw/orgs",
      "repos_url": "https://api.github.com/users/antpaw/repos",
      "events_url": "https://api.github.com/users/antpaw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antpaw/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2012-01-23T17:53:08Z",
    "updated_at": "2013-04-05T12:29:37Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "https://github.com/rails/rails/pull/3143 well...\r\n\r\n`except ` still/again doesn't work with `default_scope` in 3.2\r\nnot sure about `only` don't really understand how it's working\r\n`unscoped` does still work, but it kills all of the scopes :("
  }
]
