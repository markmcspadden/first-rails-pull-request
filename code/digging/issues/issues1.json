[
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10344",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10344/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10344/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10344/events",
    "html_url": "https://github.com/rails/rails/issues/10344",
    "id": 13654456,
    "number": 10344,
    "title": "Allow assignment of nested attribute primary keys",
    "user": {
      "login": "chadmoone",
      "id": 149477,
      "avatar_url": "https://secure.gravatar.com/avatar/c446137299be4a0664a9bc5c18dedc18?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "c446137299be4a0664a9bc5c18dedc18",
      "url": "https://api.github.com/users/chadmoone",
      "html_url": "https://github.com/chadmoone",
      "followers_url": "https://api.github.com/users/chadmoone/followers",
      "following_url": "https://api.github.com/users/chadmoone/following",
      "gists_url": "https://api.github.com/users/chadmoone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chadmoone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chadmoone/subscriptions",
      "organizations_url": "https://api.github.com/users/chadmoone/orgs",
      "repos_url": "https://api.github.com/users/chadmoone/repos",
      "events_url": "https://api.github.com/users/chadmoone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chadmoone/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2013-04-25T18:26:17Z",
    "updated_at": "2013-04-25T19:04:02Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "2d7ae1b08ee2a10b12cbfeef3a6cc6da55b57df6 removes mass_assignment_options from ActiveRecord.\r\n\r\nThis will cause some serious issues with a lot of apps.  It's not uncommon to create new records through nested attributes, and in some cases a primary key must be specified, most notably when using UUID.  Removing the `:without_options` option disallows this.\r\n\r\nFrom https://github.com/rails/rails/pull/1944#issuecomment-6228198, it sounds like there are some possible security ramifications, though I haven't been able to find an explanation of them.\r\n\r\nAlso, if this is being done because of a security concern, we should note that the current solution actually only protects the assignment of a primary key with the column name `id`—[any key other than `id` or `_destroy`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/nested_attributes.rb#L341) can still be set.  A pull request that I submitted a few days ago actually fixes this, though I was addressing it for a different reason: #10271 \r\n\r\nI'm happy to help work on a solution for this, but I'm not sure the best way to approach it."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10343",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10343/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10343/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10343/events",
    "html_url": "https://github.com/rails/rails/issues/10343",
    "id": 13653765,
    "number": 10343,
    "title": "Refactor Delegation Method",
    "user": {
      "login": "lellisga",
      "id": 210771,
      "avatar_url": "https://secure.gravatar.com/avatar/950f96a8711d959f744ad043631d36a2?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "950f96a8711d959f744ad043631d36a2",
      "url": "https://api.github.com/users/lellisga",
      "html_url": "https://github.com/lellisga",
      "followers_url": "https://api.github.com/users/lellisga/followers",
      "following_url": "https://api.github.com/users/lellisga/following",
      "gists_url": "https://api.github.com/users/lellisga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lellisga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lellisga/subscriptions",
      "organizations_url": "https://api.github.com/users/lellisga/orgs",
      "repos_url": "https://api.github.com/users/lellisga/repos",
      "events_url": "https://api.github.com/users/lellisga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lellisga/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-04-25T18:09:51Z",
    "updated_at": "2013-04-25T18:09:51Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10343",
      "diff_url": "https://github.com/rails/rails/pull/10343.diff",
      "patch_url": "https://github.com/rails/rails/pull/10343.patch"
    },
    "body": "This change is basically removing a bad condition, since when we want to\r\ndelegate is important and sufficient to validate that the object\r\nresponds to the method, otherwise there's going to be an exception\r\nbecause any object that is not nil or false is going to enter the condition."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10340",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10340/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10340/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10340/events",
    "html_url": "https://github.com/rails/rails/issues/10340",
    "id": 13636920,
    "number": 10340,
    "title": "(FIX) Error for array of integers for postgres",
    "user": {
      "login": "Slike9",
      "id": 300597,
      "avatar_url": "https://secure.gravatar.com/avatar/628305f02684cb2c56a109d0986dc01b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "628305f02684cb2c56a109d0986dc01b",
      "url": "https://api.github.com/users/Slike9",
      "html_url": "https://github.com/Slike9",
      "followers_url": "https://api.github.com/users/Slike9/followers",
      "following_url": "https://api.github.com/users/Slike9/following",
      "gists_url": "https://api.github.com/users/Slike9/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Slike9/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Slike9/subscriptions",
      "organizations_url": "https://api.github.com/users/Slike9/orgs",
      "repos_url": "https://api.github.com/users/Slike9/repos",
      "events_url": "https://api.github.com/users/Slike9/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Slike9/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-04-25T13:02:40Z",
    "updated_at": "2013-04-25T13:06:26Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10340",
      "diff_url": "https://github.com/rails/rails/pull/10340.diff",
      "patch_url": "https://github.com/rails/rails/pull/10340.patch"
    },
    "body": "Field description in schema: `t.integer :field_name, :type => :array`. \r\nError: \"undefined method `gsub' for 1:Fixnum\" in PostgreSQLColumn#quote_and_escape."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10339",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10339/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10339/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10339/events",
    "html_url": "https://github.com/rails/rails/issues/10339",
    "id": 13636421,
    "number": 10339,
    "title": "remove unused require",
    "user": {
      "login": "eiel",
      "id": 92595,
      "avatar_url": "https://secure.gravatar.com/avatar/1a679952cdf455ecd6a15cbde7ae80d5?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "1a679952cdf455ecd6a15cbde7ae80d5",
      "url": "https://api.github.com/users/eiel",
      "html_url": "https://github.com/eiel",
      "followers_url": "https://api.github.com/users/eiel/followers",
      "following_url": "https://api.github.com/users/eiel/following",
      "gists_url": "https://api.github.com/users/eiel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eiel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eiel/subscriptions",
      "organizations_url": "https://api.github.com/users/eiel/orgs",
      "repos_url": "https://api.github.com/users/eiel/repos",
      "events_url": "https://api.github.com/users/eiel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eiel/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-04-25T12:49:29Z",
    "updated_at": "2013-04-25T12:49:29Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10339",
      "diff_url": "https://github.com/rails/rails/pull/10339.diff",
      "patch_url": "https://github.com/rails/rails/pull/10339.patch"
    },
    "body": "not used remove_possible_method\r\n\r\nc6897b7d7b18b5c89aca46d4595b47c2590ce335"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10336",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10336/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10336/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10336/events",
    "html_url": "https://github.com/rails/rails/issues/10336",
    "id": 13625318,
    "number": 10336,
    "title": "Double errors nested_attributes",
    "user": {
      "login": "michalosm",
      "id": 1213269,
      "avatar_url": "https://secure.gravatar.com/avatar/8ef9fcc25d6276733c81f7e035fa9db7?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "8ef9fcc25d6276733c81f7e035fa9db7",
      "url": "https://api.github.com/users/michalosm",
      "html_url": "https://github.com/michalosm",
      "followers_url": "https://api.github.com/users/michalosm/followers",
      "following_url": "https://api.github.com/users/michalosm/following",
      "gists_url": "https://api.github.com/users/michalosm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michalosm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michalosm/subscriptions",
      "organizations_url": "https://api.github.com/users/michalosm/orgs",
      "repos_url": "https://api.github.com/users/michalosm/repos",
      "events_url": "https://api.github.com/users/michalosm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michalosm/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/needs+feedback",
        "name": "needs feedback",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionview",
        "name": "actionview",
        "color": "d7e102"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-04-25T06:54:56Z",
    "updated_at": "2013-04-25T13:31:39Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "When I have got two models:\r\nGuaranty\r\naccepts_nested_attributes_for :product\r\nbelongs_to :product\r\nAnd model Product:\r\n\r\nProduct\r\naccepts_nested_attributes_for :guaranties\r\nhas_many :guaranties\r\n\r\nAnd 2 views ( one view when add Product to Guaranty and Second view Add Guaranty to Product). using fields_for\r\n\r\nAfter update I have got double errors for e.g name: cannot be blank, name: cannot be blank\r\n\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10334",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10334/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10334/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10334/events",
    "html_url": "https://github.com/rails/rails/issues/10334",
    "id": 13614910,
    "number": 10334,
    "title": "Rails.application.config.assets.enabled not set (4.0.0.beta1)",
    "user": {
      "login": "mjhoy",
      "id": 106337,
      "avatar_url": "https://secure.gravatar.com/avatar/f0691269f6a65431becc247f1584e785?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "f0691269f6a65431becc247f1584e785",
      "url": "https://api.github.com/users/mjhoy",
      "html_url": "https://github.com/mjhoy",
      "followers_url": "https://api.github.com/users/mjhoy/followers",
      "following_url": "https://api.github.com/users/mjhoy/following",
      "gists_url": "https://api.github.com/users/mjhoy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjhoy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjhoy/subscriptions",
      "organizations_url": "https://api.github.com/users/mjhoy/orgs",
      "repos_url": "https://api.github.com/users/mjhoy/repos",
      "events_url": "https://api.github.com/users/mjhoy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjhoy/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/asset+pipeline",
        "name": "asset pipeline",
        "color": "d7e102"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-04-24T22:35:16Z",
    "updated_at": "2013-04-25T15:59:10Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "Hi,\r\n\r\non new Rails 4.0.0.beta1 apps, `Rails.application.config.assets.enabled` is nil by default. Shouldn't it be true?\r\n\r\nSteps to reproduce:\r\n\r\n```\r\n$ rails new testing\r\n$ cd testing\r\n$ bin/rails g controller test hello\r\n$ echo \"<%= 'Assets enabled' if Rails.application.config.assets.enabled %>\" >> app/views/test/hello.html.erb\r\n$ bin/rails server\r\n```\r\n\r\nNow visit `localhost:3000/test/hello` and you won't see \"Assets enabled\".\r\n\r\nApologies if this is now expected behavior.\r\n\r\nIf you print the `Rails.application.config.assets` hash, you see the `enabled` key is missing."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10328",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10328/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10328/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10328/events",
    "html_url": "https://github.com/rails/rails/issues/10328",
    "id": 13596517,
    "number": 10328,
    "title": "Fix Duplicate entries in db/schema.rb (Postgres)",
    "user": {
      "login": "codeprimate",
      "id": 14264,
      "avatar_url": "https://secure.gravatar.com/avatar/0b3a74e63253e3ceaa6e29fa59d07a5d?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "0b3a74e63253e3ceaa6e29fa59d07a5d",
      "url": "https://api.github.com/users/codeprimate",
      "html_url": "https://github.com/codeprimate",
      "followers_url": "https://api.github.com/users/codeprimate/followers",
      "following_url": "https://api.github.com/users/codeprimate/following",
      "gists_url": "https://api.github.com/users/codeprimate/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codeprimate/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codeprimate/subscriptions",
      "organizations_url": "https://api.github.com/users/codeprimate/orgs",
      "repos_url": "https://api.github.com/users/codeprimate/repos",
      "events_url": "https://api.github.com/users/codeprimate/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codeprimate/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2013-04-24T16:15:24Z",
    "updated_at": "2013-04-24T17:57:54Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10328",
      "diff_url": "https://github.com/rails/rails/pull/10328.diff",
      "patch_url": "https://github.com/rails/rails/pull/10328.patch"
    },
    "body": "https://github.com/rails/rails/issues/10327\r\n\r\nWhen a schema.rb dump is created from a Postgres database containing multiple schemas, duplicate statements will be generated in db/schema.rb, which will cause errors when loading the schema.rb.\r\n\r\nThis patch simply adds \"uniq\" statements to the method chain to ensure duplicate statements are not output.\r\n\r\nI would like to add a test for this, but am unsure how/if y'all would like to handle database-specific tests. I am unaware of how this issue might be duplicated with other RDMS's"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10327",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10327/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10327/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10327/events",
    "html_url": "https://github.com/rails/rails/issues/10327",
    "id": 13596352,
    "number": 10327,
    "title": "Duplicate entries in db/schema.rb (Postgres)",
    "user": {
      "login": "codeprimate",
      "id": 14264,
      "avatar_url": "https://secure.gravatar.com/avatar/0b3a74e63253e3ceaa6e29fa59d07a5d?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "0b3a74e63253e3ceaa6e29fa59d07a5d",
      "url": "https://api.github.com/users/codeprimate",
      "html_url": "https://github.com/codeprimate",
      "followers_url": "https://api.github.com/users/codeprimate/followers",
      "following_url": "https://api.github.com/users/codeprimate/following",
      "gists_url": "https://api.github.com/users/codeprimate/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codeprimate/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codeprimate/subscriptions",
      "organizations_url": "https://api.github.com/users/codeprimate/orgs",
      "repos_url": "https://api.github.com/users/codeprimate/repos",
      "events_url": "https://api.github.com/users/codeprimate/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codeprimate/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/needs+feedback",
        "name": "needs feedback",
        "color": "ededed"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2013-04-24T16:12:27Z",
    "updated_at": "2013-04-24T17:57:54Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "When a schema.rb dump is created from a Postgres database containing multiple schemas, duplicate statements will be generated in db/schema.rb, which will cause errors when loading the schema.rb."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10322",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10322/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10322/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10322/events",
    "html_url": "https://github.com/rails/rails/issues/10322",
    "id": 13574137,
    "number": 10322,
    "title": "Marshal not de/serializing serialized attributes properly",
    "user": {
      "login": "bricker",
      "id": 978899,
      "avatar_url": "https://secure.gravatar.com/avatar/eb56e6fa19ee55379e313367f049c1f9?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "eb56e6fa19ee55379e313367f049c1f9",
      "url": "https://api.github.com/users/bricker",
      "html_url": "https://github.com/bricker",
      "followers_url": "https://api.github.com/users/bricker/followers",
      "following_url": "https://api.github.com/users/bricker/following",
      "gists_url": "https://api.github.com/users/bricker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bricker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bricker/subscriptions",
      "organizations_url": "https://api.github.com/users/bricker/orgs",
      "repos_url": "https://api.github.com/users/bricker/repos",
      "events_url": "https://api.github.com/users/bricker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bricker/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/3-2-stable",
        "name": "3-2-stable",
        "color": "02d7e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-04-24T07:33:02Z",
    "updated_at": "2013-04-24T08:47:16Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "This is tested and reproducible in Rails 3.2.13. I've also tested in Rails 4, where the issue does *not* occur.\r\n\r\nThis issue is kind of tough to explain, so I've made a repository that you can clone to reproduce the problem. Follow the steps in the README to see the problem:\r\n\r\n<https://github.com/bricker/cache_nested_serialized_attributes>\r\n\r\nI'm also not sure this is a Rails problem or a Ruby problem, but I figure I'd start here.\r\n\r\nBasically:\r\n\r\n* User has_many Posts\r\n* Post has serialized attribute :metadata\r\n\r\nAnd to reproduce:\r\n\r\n```ruby\r\nusers = User.first(2)\r\nusers.first.posts.first\r\nusers.last.posts.first\r\ndump = Marshal.dump(users)\r\nMarshal.load(dump)\r\n=> [#<User id: 1, name: \"bricker\", created_at: \"2013-04-24 06:26:03\", updated_at: \"2013-04-24 06:26:03\">, \r\n      :@new_record]\r\n```\r\n\r\nYou can see the unexpected output in that final line. It only seems to occur under those specific conditions. Just calling `users.first.posts` works fine. Not calling `.posts` at all works fine. It's only when I load a specific post from a user before dumping that this happens.\r\n\r\nThe main difference I notice between Rails 4 (which works properly) and Rails 3.2.13 (which doesn't work) is that when calling `Marshal.dump(users)` in Rails 3, the Posts are reloaded:\r\n\r\n```ruby\r\ndump = Marshal.dump(users)\r\n  Post Load (0.2ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"user_id\" = 1\r\n  Post Load (0.2ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"user_id\" = 2\r\n```\r\n\r\n... which doesn't happen in Rails 4.\r\n\r\nI wish I could explain better - please let me know if any clarification is needed.\r\n\r\nThanks!"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10320",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10320/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10320/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10320/events",
    "html_url": "https://github.com/rails/rails/issues/10320",
    "id": 13573153,
    "number": 10320,
    "title": "to_json can emit invalid Javascript if called on a string containing unicode newline characters",
    "user": {
      "login": "nfm",
      "id": 127960,
      "avatar_url": "https://secure.gravatar.com/avatar/c0ccb7ec696d6524e9ee8048835d710e?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "c0ccb7ec696d6524e9ee8048835d710e",
      "url": "https://api.github.com/users/nfm",
      "html_url": "https://github.com/nfm",
      "followers_url": "https://api.github.com/users/nfm/followers",
      "following_url": "https://api.github.com/users/nfm/following",
      "gists_url": "https://api.github.com/users/nfm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nfm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nfm/subscriptions",
      "organizations_url": "https://api.github.com/users/nfm/orgs",
      "repos_url": "https://api.github.com/users/nfm/repos",
      "events_url": "https://api.github.com/users/nfm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nfm/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2013-04-24T06:53:54Z",
    "updated_at": "2013-04-24T23:00:38Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "If a string contains either the unicode character \\u2028 ([line separator](http://www.fileformat.info/info/unicode/char/2028/index.htm)) or \\u2029 ([paragraph separator](http://www.fileformat.info/info/unicode/char/2028/index.htm)), calling `as_json` or `to_json` on the string will output JSON that cannot be parsed as Javascript by the brower.\r\n\r\nFirefox will raise `SyntaxError: unterminated string literal`. Chrome will raise `SyntaxError: Unexpected token ILLEGAL`. I haven't tested Safari/IE/Opera.\r\n\r\nApparently, these characters are valid in string literals in JSON and will be accepted by `JSON.parse`, but are treated as line endings by Javascript parsers.\r\n\r\nHere's a quick demo:\r\n\r\n```erb\r\n# some_view.erb\r\n<% foo = \"This will cause a JS error\\u2028\" %>\r\n<%= javascript_tag do %>\r\n  var foo = <%= foo.to_json.html_safe %>;\r\n<% end %>\r\n```\r\n\r\nThe following HTML will be output:\r\n\r\n```html\r\n<script type=\"text/javascript\">\r\n  //<![CDATA[\r\n    var foo = \"This will cause a JS error \";\r\n  //]]>\r\n</script>\r\n```\r\n\r\nFirefox and Chrome will raise syntax errors.\r\n\r\nHere's one workaround I've discovered:\r\n\r\n```erb\r\n# some_view.erb\r\n<% foo = \"This will cause a JS error\\u2028\" %>\r\n<%= javascript_tag do %>\r\n  var foo = $.parseJSON(\"<%= escape_javascript(foo.to_json).html_safe %>\");\r\n<% end %>\r\n```\r\n\r\n`escape_javascript` will encode \\u2028 as '&amp;#x2028;'. It doesn't handle \\u2029.\r\n\r\nAnother workaround is to call `gsub` or `tr` after `to_json`.\r\n\r\nI'm not sure what the best approach is to tackling this. Would it be appropriate to submit a patch that modified `String#as_json` to convert these characters to a `\\n`?\r\n\r\nI'm not confident on what the implications of this kind of change would be. There may well be other unicode characters that cause the same issue, too.\r\n\r\nRelated issues:\r\n\r\n* https://github.com/rails/rails/pull/5127\r\n* https://github.com/rails/rails/pull/2618"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10319",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10319/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10319/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10319/events",
    "html_url": "https://github.com/rails/rails/issues/10319",
    "id": 13546951,
    "number": 10319,
    "title": "Permitting arrays within a hash in strong_parameters",
    "user": {
      "login": "simonc",
      "id": 119303,
      "avatar_url": "https://secure.gravatar.com/avatar/345e7c1319b0a22621cfc99f93ccfe3a?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "345e7c1319b0a22621cfc99f93ccfe3a",
      "url": "https://api.github.com/users/simonc",
      "html_url": "https://github.com/simonc",
      "followers_url": "https://api.github.com/users/simonc/followers",
      "following_url": "https://api.github.com/users/simonc/following",
      "gists_url": "https://api.github.com/users/simonc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simonc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simonc/subscriptions",
      "organizations_url": "https://api.github.com/users/simonc/orgs",
      "repos_url": "https://api.github.com/users/simonc/repos",
      "events_url": "https://api.github.com/users/simonc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simonc/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-04-23T17:33:28Z",
    "updated_at": "2013-04-24T03:38:04Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10319",
      "diff_url": "https://github.com/rails/rails/pull/10319.diff",
      "patch_url": "https://github.com/rails/rails/pull/10319.patch"
    },
    "body": "See: rails/strong_parameters#121"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10313",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10313/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10313/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10313/events",
    "html_url": "https://github.com/rails/rails/issues/10313",
    "id": 13515782,
    "number": 10313,
    "title": "destroy only if associated record is destroyed",
    "user": {
      "login": "neerajdotname",
      "id": 6399,
      "avatar_url": "https://secure.gravatar.com/avatar/934f858e451cf9b771996b2940cd696b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "934f858e451cf9b771996b2940cd696b",
      "url": "https://api.github.com/users/neerajdotname",
      "html_url": "https://github.com/neerajdotname",
      "followers_url": "https://api.github.com/users/neerajdotname/followers",
      "following_url": "https://api.github.com/users/neerajdotname/following",
      "gists_url": "https://api.github.com/users/neerajdotname/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/neerajdotname/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/neerajdotname/subscriptions",
      "organizations_url": "https://api.github.com/users/neerajdotname/orgs",
      "repos_url": "https://api.github.com/users/neerajdotname/repos",
      "events_url": "https://api.github.com/users/neerajdotname/events{/privacy}",
      "received_events_url": "https://api.github.com/users/neerajdotname/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-04-23T01:58:17Z",
    "updated_at": "2013-04-23T01:58:17Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10313",
      "diff_url": "https://github.com/rails/rails/pull/10313.diff",
      "patch_url": "https://github.com/rails/rails/pull/10313.patch"
    },
    "body": "fixes #5147\r\n\r\nIf any of the associated records fail to destroy then do not destroy the record.\r\n\r\nI'll clean up the commit message and will add a changelog  if there is an interest in the patch.\r\n\r\n/cc @carlosantoniodasilva . You participated in the discussion of the original issue."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10304",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10304/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10304/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10304/events",
    "html_url": "https://github.com/rails/rails/issues/10304",
    "id": 13503864,
    "number": 10304,
    "title": "find_by_* method declared on an a hmt association class is ignored",
    "user": {
      "login": "dhh",
      "id": 2741,
      "avatar_url": "https://secure.gravatar.com/avatar/ed9635566b34ade32274f510f0f9a6d2?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "ed9635566b34ade32274f510f0f9a6d2",
      "url": "https://api.github.com/users/dhh",
      "html_url": "https://github.com/dhh",
      "followers_url": "https://api.github.com/users/dhh/followers",
      "following_url": "https://api.github.com/users/dhh/following",
      "gists_url": "https://api.github.com/users/dhh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhh/subscriptions",
      "organizations_url": "https://api.github.com/users/dhh/orgs",
      "repos_url": "https://api.github.com/users/dhh/repos",
      "events_url": "https://api.github.com/users/dhh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhh/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": {
      "login": "jonleighton",
      "id": 1979,
      "avatar_url": "https://secure.gravatar.com/avatar/2940bc7d4506f3e099e3dcc32a412b98?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "2940bc7d4506f3e099e3dcc32a412b98",
      "url": "https://api.github.com/users/jonleighton",
      "html_url": "https://github.com/jonleighton",
      "followers_url": "https://api.github.com/users/jonleighton/followers",
      "following_url": "https://api.github.com/users/jonleighton/following",
      "gists_url": "https://api.github.com/users/jonleighton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonleighton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonleighton/subscriptions",
      "organizations_url": "https://api.github.com/users/jonleighton/orgs",
      "repos_url": "https://api.github.com/users/jonleighton/repos",
      "events_url": "https://api.github.com/users/jonleighton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonleighton/received_events",
      "type": "User"
    },
    "milestone": {
      "url": "https://api.github.com/repos/rails/rails/milestones/9",
      "labels_url": "https://api.github.com/repos/rails/rails/milestones/9/labels",
      "id": 44893,
      "number": 9,
      "title": "4.0.0",
      "description": "Changes that break 3.x API.",
      "creator": {
        "login": "jeremy",
        "id": 199,
        "avatar_url": "https://secure.gravatar.com/avatar/24d2f8804e6bb4b7ea6bd11e0a586470?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
        "gravatar_id": "24d2f8804e6bb4b7ea6bd11e0a586470",
        "url": "https://api.github.com/users/jeremy",
        "html_url": "https://github.com/jeremy",
        "followers_url": "https://api.github.com/users/jeremy/followers",
        "following_url": "https://api.github.com/users/jeremy/following",
        "gists_url": "https://api.github.com/users/jeremy/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jeremy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jeremy/subscriptions",
        "organizations_url": "https://api.github.com/users/jeremy/orgs",
        "repos_url": "https://api.github.com/users/jeremy/repos",
        "events_url": "https://api.github.com/users/jeremy/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jeremy/received_events",
        "type": "User"
      },
      "open_issues": 1,
      "closed_issues": 84,
      "state": "open",
      "created_at": "2011-10-09T02:53:46Z",
      "updated_at": "2013-04-23T16:24:09Z",
      "due_on": null
    },
    "comments": 3,
    "created_at": "2013-04-22T20:06:23Z",
    "updated_at": "2013-04-23T00:57:37Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "```\r\ndiff --git a/activerecord/test/cases/deprecated_dynamic_methods_test.rb b/activerecord/test/cases/deprecated_dynamic_methods_test.rb\r\nindex 8e842d8..a6b56c2 100644\r\n--- a/activerecord/test/cases/deprecated_dynamic_methods_test.rb\r\n+++ b/activerecord/test/cases/deprecated_dynamic_methods_test.rb\r\n@@ -413,6 +413,10 @@ class DeprecatedDynamicMethodsTest < ActiveRecord::TestCase\r\n     assert_equal person, person.readers.first.person\r\n   end\r\n \r\n+  def test_find_by_custom_finder_on_association_class\r\n+    assert_equal [], Author.first.comments.find_by_anything!\r\n+  end\r\n+\r\n   def test_find_or_initialize\r\n     the_client = companies(:first_firm).clients.find_or_initialize_by_name(\"Yet another client\")\r\n     assert_equal companies(:first_firm).id, the_client.firm_id\r\ndiff --git a/activerecord/test/models/comment.rb b/activerecord/test/models/comment.rb\r\nindex ede5fbd..75cd984 100644\r\n--- a/activerecord/test/models/comment.rb\r\n+++ b/activerecord/test/models/comment.rb\r\n@@ -26,6 +26,11 @@ class Comment < ActiveRecord::Base\r\n     all\r\n   end\r\n   scope :all_as_scope, -> { all }\r\n+\r\n+  \r\n+  def self.find_by_anything!\r\n+    all\r\n+  end\r\n end\r\n \r\n class SpecialComment < Comment\r\n```\r\n\r\nProduces this failure:\r\n\r\n\r\n```\r\n\r\nDeprecatedDynamicMethodsTest#test_find_by_custom_finder_on_association_class:\r\nActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: comments.anything: SELECT  \"comments\".* FROM \"comments\" INNER JOIN \"posts\" ON \"comments\".\"post_id\" = \"posts\".\"id\" WHERE \"posts\".\"author_id\" = ? AND \"comments\".\"anything\" IS NULL LIMIT 1\r\n    /Users/david/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/sqlite3-1.3.7/lib/sqlite3/database.rb:91:in `initialize'\r\n    /Users/david/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/sqlite3-1.3.7/lib/sqlite3/database.rb:91:in `new'\r\n    /Users/david/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/sqlite3-1.3.7/lib/sqlite3/database.rb:91:in `prepare'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb:303:in `block in exec_query'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:425:in `block in log'\r\n    /Users/david/Code/rails/activesupport/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:420:in `log'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb:292:in `exec_query'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb:504:in `select'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:24:in `select_all'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:63:in `select_all'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/querying.rb:36:in `find_by_sql'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/relation.rb:561:in `exec_queries'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/relation.rb:447:in `load'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/relation.rb:196:in `to_a'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/relation/finder_methods.rb:315:in `find_take'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/relation/finder_methods.rb:65:in `take'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/relation/finder_methods.rb:71:in `take!'\r\n    /Users/david/Code/rails/activerecord/lib/active_record/relation/finder_methods.rb:54:in `find_by!'\r\n    /Users/david/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/activerecord-deprecated_finders-1.0.1/lib/active_record/deprecated_finders/collection_proxy.rb:10:in `method_missing'\r\n    test/cases/deprecated_dynamic_methods_test.rb:417:in `test_find_by_custom_finder_on_association_class'\r\n```"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10303",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10303/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10303/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10303/events",
    "html_url": "https://github.com/rails/rails/issues/10303",
    "id": 13496715,
    "number": 10303,
    "title": "Preserve context for joins while merging relations",
    "user": {
      "login": "ahorner",
      "id": 116396,
      "avatar_url": "https://secure.gravatar.com/avatar/1e79c6e0233f5a198c127890dbd45987?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "1e79c6e0233f5a198c127890dbd45987",
      "url": "https://api.github.com/users/ahorner",
      "html_url": "https://github.com/ahorner",
      "followers_url": "https://api.github.com/users/ahorner/followers",
      "following_url": "https://api.github.com/users/ahorner/following",
      "gists_url": "https://api.github.com/users/ahorner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahorner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahorner/subscriptions",
      "organizations_url": "https://api.github.com/users/ahorner/orgs",
      "repos_url": "https://api.github.com/users/ahorner/repos",
      "events_url": "https://api.github.com/users/ahorner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahorner/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-04-22T18:00:42Z",
    "updated_at": "2013-04-23T02:22:49Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10303",
      "diff_url": "https://github.com/rails/rails/pull/10303.diff",
      "patch_url": "https://github.com/rails/rails/pull/10303.patch"
    },
    "body": "This is a backport of #10164, already merged into\r\nmaster. The problem is described in lengthy detail\r\nin issues #3002 and #5494."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10298",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10298/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10298/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10298/events",
    "html_url": "https://github.com/rails/rails/issues/10298",
    "id": 13478234,
    "number": 10298,
    "title": "Added :on => :save option for validations ",
    "user": {
      "login": "aditya-kapoor",
      "id": 1955930,
      "avatar_url": "https://secure.gravatar.com/avatar/7ce4d65f432864a629d71409f1443c68?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "7ce4d65f432864a629d71409f1443c68",
      "url": "https://api.github.com/users/aditya-kapoor",
      "html_url": "https://github.com/aditya-kapoor",
      "followers_url": "https://api.github.com/users/aditya-kapoor/followers",
      "following_url": "https://api.github.com/users/aditya-kapoor/following",
      "gists_url": "https://api.github.com/users/aditya-kapoor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aditya-kapoor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aditya-kapoor/subscriptions",
      "organizations_url": "https://api.github.com/users/aditya-kapoor/orgs",
      "repos_url": "https://api.github.com/users/aditya-kapoor/repos",
      "events_url": "https://api.github.com/users/aditya-kapoor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aditya-kapoor/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-04-22T12:10:53Z",
    "updated_at": "2013-04-22T12:10:53Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10298",
      "diff_url": "https://github.com/rails/rails/pull/10298.diff",
      "patch_url": "https://github.com/rails/rails/pull/10298.patch"
    },
    "body": "This is in reply to the issue #10248...I am presenting my solution to the problem that is faced by me...."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10296",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10296/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10296/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10296/events",
    "html_url": "https://github.com/rails/rails/issues/10296",
    "id": 13471946,
    "number": 10296,
    "title": "fix test/controller/html-scanner/sanitizer_test.rb",
    "user": {
      "login": "jordimassaguerpla",
      "id": 1148215,
      "avatar_url": "https://secure.gravatar.com/avatar/65c6b3439f77fd121a63e42e7537a5d5?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "65c6b3439f77fd121a63e42e7537a5d5",
      "url": "https://api.github.com/users/jordimassaguerpla",
      "html_url": "https://github.com/jordimassaguerpla",
      "followers_url": "https://api.github.com/users/jordimassaguerpla/followers",
      "following_url": "https://api.github.com/users/jordimassaguerpla/following",
      "gists_url": "https://api.github.com/users/jordimassaguerpla/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jordimassaguerpla/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jordimassaguerpla/subscriptions",
      "organizations_url": "https://api.github.com/users/jordimassaguerpla/orgs",
      "repos_url": "https://api.github.com/users/jordimassaguerpla/repos",
      "events_url": "https://api.github.com/users/jordimassaguerpla/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jordimassaguerpla/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-04-22T09:39:55Z",
    "updated_at": "2013-04-22T09:39:55Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10296",
      "diff_url": "https://github.com/rails/rails/pull/10296.diff",
      "patch_url": "https://github.com/rails/rails/pull/10296.patch"
    },
    "body": "The test was failing.  I think because there were too many back slashes in order to escape quotes.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10291",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10291/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10291/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10291/events",
    "html_url": "https://github.com/rails/rails/issues/10291",
    "id": 13459361,
    "number": 10291,
    "title": "Accelerate asset delivery in Rails 4, yay or nay?",
    "user": {
      "login": "SamSaffron",
      "id": 5213,
      "avatar_url": "https://secure.gravatar.com/avatar/3dcae8378d46c244172a115c28ca49ce?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "3dcae8378d46c244172a115c28ca49ce",
      "url": "https://api.github.com/users/SamSaffron",
      "html_url": "https://github.com/SamSaffron",
      "followers_url": "https://api.github.com/users/SamSaffron/followers",
      "following_url": "https://api.github.com/users/SamSaffron/following",
      "gists_url": "https://api.github.com/users/SamSaffron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamSaffron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamSaffron/subscriptions",
      "organizations_url": "https://api.github.com/users/SamSaffron/orgs",
      "repos_url": "https://api.github.com/users/SamSaffron/repos",
      "events_url": "https://api.github.com/users/SamSaffron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamSaffron/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 12,
    "created_at": "2013-04-22T00:26:32Z",
    "updated_at": "2013-04-22T23:16:38Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "At Discourse we unfortunately have an enormous amount of assets to deliver in development mode. \r\n\r\nCurrent count is **800** css and js files. \r\n\r\nThis means that clicking the \"reload\" button in the browser in development mode results in 800 requests to the web server. \r\n\r\nOther big \"asset heavy\" apps (like ember js etc) tend to have lots of js assets. This is also discussed here: http://discuss.emberjs.com/t/what-are-people-doing-about-the-gazzillion-file-problem/1006\r\n\r\n--- \r\n\r\nThe main reason asset delivery is slow in Rails dev environment is that the entire middleware stack needs to be walked prior to reaching sprockets and determining if an asset changed. \r\n\r\nFor context, this is Discourse prior to improving this: \r\n\r\n![image](https://f.cloud.github.com/assets/5213/407132/69baa132-aae2-11e2-95a8-dfff32dcc768.png)\r\n\r\nIntroducing this middleware in front of the stack: \r\n\r\n```ruby\r\nmodule Middleware\r\n  # this class cheats and bypasses rails altogether if the client attempts\r\n  # to download a static asset\r\n  class TurboDev\r\n    def initialize(app, settings={})\r\n      @app = app\r\n    end\r\n    def call(env)\r\n      # hack to bypass all middleware if serving assets, a lot faster 4.5 seconds -> 1.5 seconds\r\n      if (etag = env['HTTP_IF_NONE_MATCH']) && env['REQUEST_PATH'] =~ /^\\/assets\\//\r\n        name = $'\r\n        etag = etag.gsub \"\\\"\", \"\"\r\n        asset = Rails.application.assets.find_asset(name)\r\n        if asset && asset.digest == etag\r\n          return [304,{},[]]\r\n        end\r\n      end\r\n\r\n      @app.call(env)\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nTakes us to:\r\n\r\n![image](https://f.cloud.github.com/assets/5213/407136/be70a5e6-aae2-11e2-9b21-341cc7c19b93.png)\r\n\r\nSo in this test run that is over 4 seconds down to 1.3 seconds. \r\n\r\n---\r\n\r\nI discussed this with @josh over twitter, the current thinking is that sprockets 3 is going to use source maps only for dev, bypassing much of this issue. \r\n\r\nMy concern is that sourcemaps may introduce extra server delays and outlaw some optimisations you can do with split up files. For example, when assets are split you could use $LAB to load the js files, circumventing the browser refresh forced round trip. \r\n\r\n--- \r\n\r\nAnyway, we need to decide if we want this optimisation or not in Rails 4. \r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10288",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10288/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10288/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10288/events",
    "html_url": "https://github.com/rails/rails/issues/10288",
    "id": 13453774,
    "number": 10288,
    "title": "Make ActiveRecord::Store more robust",
    "user": {
      "login": "docunext",
      "id": 110777,
      "avatar_url": "https://secure.gravatar.com/avatar/a7c1bd011419bd06463527bb7b488643?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "a7c1bd011419bd06463527bb7b488643",
      "url": "https://api.github.com/users/docunext",
      "html_url": "https://github.com/docunext",
      "followers_url": "https://api.github.com/users/docunext/followers",
      "following_url": "https://api.github.com/users/docunext/following",
      "gists_url": "https://api.github.com/users/docunext/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/docunext/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/docunext/subscriptions",
      "organizations_url": "https://api.github.com/users/docunext/orgs",
      "repos_url": "https://api.github.com/users/docunext/repos",
      "events_url": "https://api.github.com/users/docunext/events{/privacy}",
      "received_events_url": "https://api.github.com/users/docunext/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-04-21T17:50:27Z",
    "updated_at": "2013-04-21T17:50:27Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10288",
      "diff_url": "https://github.com/rails/rails/pull/10288.diff",
      "patch_url": "https://github.com/rails/rails/pull/10288.patch"
    },
    "body": "moved the concepts behind the Coder class within the test/models/admin/user.rb file to the Store class so that uninitialized serial data has a qdefault value, preventing non-yaml parsers from raising NoMethodError on nil input"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10287",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10287/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10287/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10287/events",
    "html_url": "https://github.com/rails/rails/issues/10287",
    "id": 13453591,
    "number": 10287,
    "title": "Obey validation rules on: :save condition",
    "user": {
      "login": "neerajdotname",
      "id": 6399,
      "avatar_url": "https://secure.gravatar.com/avatar/934f858e451cf9b771996b2940cd696b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "934f858e451cf9b771996b2940cd696b",
      "url": "https://api.github.com/users/neerajdotname",
      "html_url": "https://github.com/neerajdotname",
      "followers_url": "https://api.github.com/users/neerajdotname/followers",
      "following_url": "https://api.github.com/users/neerajdotname/following",
      "gists_url": "https://api.github.com/users/neerajdotname/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/neerajdotname/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/neerajdotname/subscriptions",
      "organizations_url": "https://api.github.com/users/neerajdotname/orgs",
      "repos_url": "https://api.github.com/users/neerajdotname/repos",
      "events_url": "https://api.github.com/users/neerajdotname/events{/privacy}",
      "received_events_url": "https://api.github.com/users/neerajdotname/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 14,
    "created_at": "2013-04-21T17:40:26Z",
    "updated_at": "2013-04-24T15:38:50Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10287",
      "diff_url": "https://github.com/rails/rails/pull/10287.diff",
      "patch_url": "https://github.com/rails/rails/pull/10287.patch"
    },
    "body": "class User < ActiveRecord::Base\r\n      validates :name, presence: true, on: :save\r\n    end\r\n\r\nIn at the above case `User.new.valid?` returns true. Also while\r\nupdating user can set `name` value to `nil` and no validation\r\nerror is found while saving the record.\r\n\r\nActive Model understands validations in either `:create` or\r\n`:update` context. Otherwise it is best to not set any context.\r\nAnd that's what this fix is attempting to do.\r\n\r\nIt removes context if context is `:save`.\r\n\r\nfixes #10248"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10281",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10281/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10281/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10281/events",
    "html_url": "https://github.com/rails/rails/issues/10281",
    "id": 13445980,
    "number": 10281,
    "title": "add ActiveSupport::TimeZone.add_new_tz method ",
    "user": {
      "login": "vipulnsward",
      "id": 567626,
      "avatar_url": "https://secure.gravatar.com/avatar/f459742822cf8347e83d5c445378a934?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "f459742822cf8347e83d5c445378a934",
      "url": "https://api.github.com/users/vipulnsward",
      "html_url": "https://github.com/vipulnsward",
      "followers_url": "https://api.github.com/users/vipulnsward/followers",
      "following_url": "https://api.github.com/users/vipulnsward/following",
      "gists_url": "https://api.github.com/users/vipulnsward/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vipulnsward/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vipulnsward/subscriptions",
      "organizations_url": "https://api.github.com/users/vipulnsward/orgs",
      "repos_url": "https://api.github.com/users/vipulnsward/repos",
      "events_url": "https://api.github.com/users/vipulnsward/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vipulnsward/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activesupport",
        "name": "activesupport",
        "color": "FC9300"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-04-21T08:03:30Z",
    "updated_at": "2013-04-23T19:11:57Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10281",
      "diff_url": "https://github.com/rails/rails/pull/10281.diff",
      "patch_url": "https://github.com/rails/rails/pull/10281.patch"
    },
    "body": "Currently `ActiveSupport::TimeZone::MAPPING` limits adding new tz mappings to `ActiveSupport::TimeZone`.\r\n\r\nThis PR trier to provide a method `ActiveSupport::TimeZone.add_new_tz` to support adding more Timezone mappings\r\n\r\nFixes #10276"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10278",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10278/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10278/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10278/events",
    "html_url": "https://github.com/rails/rails/issues/10278",
    "id": 13439411,
    "number": 10278,
    "title": "Fix #to_json for BasicObject Enumerables",
    "user": {
      "login": "codeodor",
      "id": 23479,
      "avatar_url": "https://secure.gravatar.com/avatar/0cf2fe362e3d5aadd654865b7d265da8?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "0cf2fe362e3d5aadd654865b7d265da8",
      "url": "https://api.github.com/users/codeodor",
      "html_url": "https://github.com/codeodor",
      "followers_url": "https://api.github.com/users/codeodor/followers",
      "following_url": "https://api.github.com/users/codeodor/following",
      "gists_url": "https://api.github.com/users/codeodor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codeodor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codeodor/subscriptions",
      "organizations_url": "https://api.github.com/users/codeodor/orgs",
      "repos_url": "https://api.github.com/users/codeodor/repos",
      "events_url": "https://api.github.com/users/codeodor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codeodor/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activesupport",
        "name": "activesupport",
        "color": "FC9300"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-04-20T18:46:09Z",
    "updated_at": "2013-04-20T19:07:47Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10278",
      "diff_url": "https://github.com/rails/rails/pull/10278.diff",
      "patch_url": "https://github.com/rails/rails/pull/10278.patch"
    },
    "body": "Objects which `include Enumerable` already get the `as_json` method, but they do not get `to_json`.\r\n\r\nThat means it would get `to_json` from `Object` in most cases, however, not if they inherit from `BasicObject`.\r\n\r\nYou might think, \"who does that?!\" :confused: (and rightfully so). \r\n\r\nThat is just the simplest case where we'd have an issue. For a real-life use case, consider someone who uses `SimpleDelegator` and includes `Enumerable`. In that case, `#to_json` will forward on to the wrapped object, which means it will end up calling `#as_json` on each element in the wrapped collection, instead of each element in the collection we actually want to call it on.\r\n\r\nDelegation is a much more common pattern than inheriting directly from `BasicObject` and [we ran into this issue in DisplayCase](https://github.com/objects-on-rails/display-case/issues/27).\r\n\r\nNow, it could be the case that we should just say, \"if you don't want to forward the `#to_json` message to the other object, then write a method to define it.\"\r\n\r\nI thought about that a lot, but since `as_json` is already on `Enumerable` I thought `#to_json` probably should be as well. (Especially since there was already a test case for it, but it was not testing against a custom `Enumerable`, it was testing against an array of hashes).\r\n\r\n(And we certainly don't want to pollute `BasicObject` with the method, even though it is the simplest test case I could come up with!)\r\n\r\nIn addition to testing the case I mentioned above, this pull request also adds tests to demonstrate:\r\n\r\n1. The classes to which Rails adds `#to_json` get the method. (On the face of it, I thought that's really not testing much, but it could be useful to catch regressions for objects that expect it to be defined).\r\n2. That we actually test (to|as)_json against an enumerable instead of a hash.\r\n\r\n:thumbsup: ?"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10276",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10276/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10276/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10276/events",
    "html_url": "https://github.com/rails/rails/issues/10276",
    "id": 13436064,
    "number": 10276,
    "title": "Add Curaçao to ActiveSupport::TimeZone",
    "user": {
      "login": "acesuares",
      "id": 2784,
      "avatar_url": "https://secure.gravatar.com/avatar/3dfc4136712f120023f092004f062cc4?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "3dfc4136712f120023f092004f062cc4",
      "url": "https://api.github.com/users/acesuares",
      "html_url": "https://github.com/acesuares",
      "followers_url": "https://api.github.com/users/acesuares/followers",
      "following_url": "https://api.github.com/users/acesuares/following",
      "gists_url": "https://api.github.com/users/acesuares/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acesuares/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acesuares/subscriptions",
      "organizations_url": "https://api.github.com/users/acesuares/orgs",
      "repos_url": "https://api.github.com/users/acesuares/repos",
      "events_url": "https://api.github.com/users/acesuares/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acesuares/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activesupport",
        "name": "activesupport",
        "color": "FC9300"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-04-20T13:53:48Z",
    "updated_at": "2013-04-21T08:03:30Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "Or is that a way to do that runtime?\r\n\r\nI tried ActiveSupport::TimeZone::zones_map[\"Curaçao\"] = ActiveSupport::TimeZone['La Paz'] but that didn't work, and MAPPING is a frozen hash and can't be modified.\r\n\r\nHow to add Curaçao to the list of timezones?\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10271",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10271/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10271/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10271/events",
    "html_url": "https://github.com/rails/rails/issues/10271",
    "id": 13418348,
    "number": 10271,
    "title": "Respect custom primary keys for nested attributes",
    "user": {
      "login": "chadmoone",
      "id": 149477,
      "avatar_url": "https://secure.gravatar.com/avatar/c446137299be4a0664a9bc5c18dedc18?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "c446137299be4a0664a9bc5c18dedc18",
      "url": "https://api.github.com/users/chadmoone",
      "html_url": "https://github.com/chadmoone",
      "followers_url": "https://api.github.com/users/chadmoone/followers",
      "following_url": "https://api.github.com/users/chadmoone/following",
      "gists_url": "https://api.github.com/users/chadmoone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chadmoone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chadmoone/subscriptions",
      "organizations_url": "https://api.github.com/users/chadmoone/orgs",
      "repos_url": "https://api.github.com/users/chadmoone/repos",
      "events_url": "https://api.github.com/users/chadmoone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chadmoone/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2013-04-19T20:01:18Z",
    "updated_at": "2013-04-25T18:26:18Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10271",
      "diff_url": "https://github.com/rails/rails/pull/10271.diff",
      "patch_url": "https://github.com/rails/rails/pull/10271.patch"
    },
    "body": "ActiveRecord allows us to specify custom primary keys, but does not properly accept them for nested attributes.\r\n\r\nFor example, with the models:\r\n\r\n```ruby\r\nclass Deck < ActiveRecord::Base\r\n  has_many :cards, autosave: true\r\n  accepts_nested_attributes_for :cards, allow_destroy: true\r\nend\r\n\r\nclass Card < ActiveRecord::Base\r\n  self.primary_key = \"uuid\"\r\n  belongs_to :deck\r\nend\r\n```\r\n\r\nThe primary key stored in the database (and presumably other related applications) as `uuid`, and the object is serialized as such:\r\n```ruby\r\nmy_deck.cards.inspect\r\n# => [{\"uuid\":\"abcd\",\"content\":\"Hello\",\"deck_id\":14,\"created_at\":\"2013-04-17T22:05:09.623Z\",\"updated_at\":\"2013-04-17T22:05:09.679Z\"},{\"uuid\":\"efgh\",\"content\":\"World!\",\"deck_id\":14,\"created_at\":\"2013-04-17T22:05:09.626Z\",\"updated_at\":\"2013-04-17T22:05:09.681Z\"}]\r\n\r\nmy_deck.cards.to_json\r\n#=> [{\"uuid\":\"abcd\",\"content\":\"Hello\",\"deck_id\":14,\"created_at\":\"2013-04-17T22:05:09.623Z\",\"updated_at\":\"2013-04-17T22:05:09.679Z\"},{\"uuid\":\"efgh\",\"content\":\"World!\",\"deck_id\":14,\"created_at\":\"2013-04-17T22:05:09.626Z\",\"updated_at\":\"2013-04-17T22:05:09.681Z\"}]\r\n```\r\n\r\nTo create a new instance of the model itself:\r\n```ruby\r\nmy_deck.cards.create(uuid:\"abcdefg\", content: \"Sup?\")\r\n```\r\n\r\nHowever, using the correct primary key in an update to nested attributes will fail in multiple ways:\r\n```ruby\r\n# Can't destroy nested objects\r\nmy_deck.update([{uuid:\"abcd\",content:\"Hello\", _destroy: true}},\r\n                {uuid:\"efgh\",content:\"World!\", _destroy: true}])\r\nmy_deck.cards.inspect\r\n#=> [{\"uuid\":\"abcd\",\"content\":\"Hello\",\"deck_id\":14,\"created_at\":\"2013-04-17T22:05:09.623Z\",\"updated_at\":\"2013-04-17T22:05:09.679Z\"},{\"uuid\":\"efgh\",\"content\":\"World!\",\"deck_id\":14,\"created_at\":\"2013-04-17T22:05:09.626Z\",\"updated_at\":\"2013-04-17T22:05:09.681Z\"}]\r\n\r\n# Attempting to modify an object creates a new one,\r\n# with the same primary key value (which will fail)\r\nmy_deck.update([{uuid:\"abcd\",content:\"Something\"}},\r\n                {uuid:\"efgh\",content:\"Else!\"}])\r\n#=> Throws ActiveRecord::RecordNotUnique error\r\n```\r\nInstead, we currently need to set up a hash like so:\r\n```ruby\r\nmy_deck.update([{id:\"abcd\",content:\"All alone :(\"}},\r\n                {id:\"efgh\",content:\"Else!\", _destroy: true}])\r\nmy_deck.cards.inspect\r\n#=> [{\"uuid\":\"abcd\",\"content\":\"All alone :(\",\"deck_id\":14,\"created_at\":\"2013-04-17T22:05:09.623Z\",\"updated_at\":\"2013-04-17T22:05:09.679Z\"}]\r\n```\r\n\r\nForcing the use of the arbitrary key `id` doesn't seem to make a lot of sense, and it forces anything interacting with Rails (and sometimes even Rails itself) to specially modify the object hash to use an otherwise unknown key.\r\n\r\nThe only tests that I needed to modify were two that specifically deal with custom primary keys in nested attributes (as these were verifying the old behavior), and all other tests pass.\r\n\r\nPlease let me know if you have any issues or if you think there is a better way to go about this."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10268",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10268/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10268/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10268/events",
    "html_url": "https://github.com/rails/rails/issues/10268",
    "id": 13401461,
    "number": 10268,
    "title": "Add a #select_multi method to cache stores",
    "user": {
      "login": "dasch",
      "id": 6351,
      "avatar_url": "https://secure.gravatar.com/avatar/a9cc05e6a7866e5fa9a7d107b5070174?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "a9cc05e6a7866e5fa9a7d107b5070174",
      "url": "https://api.github.com/users/dasch",
      "html_url": "https://github.com/dasch",
      "followers_url": "https://api.github.com/users/dasch/followers",
      "following_url": "https://api.github.com/users/dasch/following",
      "gists_url": "https://api.github.com/users/dasch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dasch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dasch/subscriptions",
      "organizations_url": "https://api.github.com/users/dasch/orgs",
      "repos_url": "https://api.github.com/users/dasch/repos",
      "events_url": "https://api.github.com/users/dasch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dasch/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activesupport",
        "name": "activesupport",
        "color": "FC9300"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2013-04-19T13:44:49Z",
    "updated_at": "2013-04-21T16:25:01Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10268",
      "diff_url": "https://github.com/rails/rails/pull/10268.diff",
      "patch_url": "https://github.com/rails/rails/pull/10268.patch"
    },
    "body": "Allows selecting a subset of a collection for which the cache returns true values. I extracted it from the following usage:\r\n\r\n```ruby\r\n# In a controller.\r\n@readable_posts = Rails.cache.select_multi(*@posts) do |post|\r\n  # This is very expensive:\r\n  can?(:read, post)\r\nend\r\n```\r\n\r\nI'm not sure if it's too specific, but it's really useful and efficient. It uses `read_multi`, so it only sends a single `get` to the cache server."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10266",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10266/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10266/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10266/events",
    "html_url": "https://github.com/rails/rails/issues/10266",
    "id": 13390940,
    "number": 10266,
    "title": "fix HashWithIndifferentAccess#to_hash behaviour",
    "user": {
      "login": "vipulnsward",
      "id": 567626,
      "avatar_url": "https://secure.gravatar.com/avatar/f459742822cf8347e83d5c445378a934?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "f459742822cf8347e83d5c445378a934",
      "url": "https://api.github.com/users/vipulnsward",
      "html_url": "https://github.com/vipulnsward",
      "followers_url": "https://api.github.com/users/vipulnsward/followers",
      "following_url": "https://api.github.com/users/vipulnsward/following",
      "gists_url": "https://api.github.com/users/vipulnsward/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vipulnsward/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vipulnsward/subscriptions",
      "organizations_url": "https://api.github.com/users/vipulnsward/orgs",
      "repos_url": "https://api.github.com/users/vipulnsward/repos",
      "events_url": "https://api.github.com/users/vipulnsward/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vipulnsward/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activesupport",
        "name": "activesupport",
        "color": "FC9300"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2013-04-19T07:57:02Z",
    "updated_at": "2013-04-21T13:14:51Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/rails/rails/pull/10266",
      "diff_url": "https://github.com/rails/rails/pull/10266.diff",
      "patch_url": "https://github.com/rails/rails/pull/10266.patch"
    },
    "body": "Currently `HashWithIndifferentAccess#to_hash` ,returns a hash containing HashWithIndifferentAccess within for a nested hash, eg\r\n\r\nif \r\n`{:a => {:b => {:c => '3'}}}` is a HashWithIndifferentAccess\r\nthen #to_hash returns \r\n\r\n`{:a => {:b => {:c => '3'}}}`\r\nwhere {:b => {:c => '3'}} is a `HashWithIndifferentAccess` object, while the whole object itself is a `Hash`"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10263",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10263/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10263/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10263/events",
    "html_url": "https://github.com/rails/rails/issues/10263",
    "id": 13364436,
    "number": 10263,
    "title": "time_zone_options_for_select values use full zone name?",
    "user": {
      "login": "bdmac",
      "id": 47326,
      "avatar_url": "https://secure.gravatar.com/avatar/bd75fa9879dc67a44461f53ab38e7d62?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "bd75fa9879dc67a44461f53ab38e7d62",
      "url": "https://api.github.com/users/bdmac",
      "html_url": "https://github.com/bdmac",
      "followers_url": "https://api.github.com/users/bdmac/followers",
      "following_url": "https://api.github.com/users/bdmac/following",
      "gists_url": "https://api.github.com/users/bdmac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bdmac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bdmac/subscriptions",
      "organizations_url": "https://api.github.com/users/bdmac/orgs",
      "repos_url": "https://api.github.com/users/bdmac/repos",
      "events_url": "https://api.github.com/users/bdmac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bdmac/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionview",
        "name": "actionview",
        "color": "d7e102"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-04-18T18:34:32Z",
    "updated_at": "2013-04-18T18:34:32Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "I'm curious about something I noticed with time_zone_options_for_select.  The existing implementation sets up a lambda to convert the zones into something usable by options_for_select.  That lambda looks like:\r\n\r\n```ruby\r\nconvert_zones = lambda { |list| list.map { |z| [ z.to_s, z.name ] } }\r\n```\r\n\r\nz.to_s returns the Rails TimeZone name.  Are these standard names for other systems?  They do not seem to be.  Is there a reason we don't do something like:\r\n\r\n```ruby\r\nconvert_zones = lambda { |list| list.map { |z| [ z.tzinfo.identifier, z.name ] } }\r\n```\r\n\r\nThis uses the TZ identifier as the value in the select list instead of the Rails TimeZone name.  As far as I can see from ActiveSupport::TimeZone, the TZ identifier would work as well as the Rails TZ name.\r\n\r\nMy problem is this.  I'm storing the TZ returned from a TZ select into a field in a Postgres database.  I would \"like\" to be able to use that TZ in Postgres queries but the Rails TimeZone seme to be non-standard and unsupported by Postgres.  Postgres either expects a full zone name (tzinfo.identifier) or a zone abbreviation: http://www.postgresql.org/docs/9.2/static/datatype-datetime.html#DATATYPE-TIMEZONES\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10257",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10257/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10257/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10257/events",
    "html_url": "https://github.com/rails/rails/issues/10257",
    "id": 13327330,
    "number": 10257,
    "title": "BasicAuth decode_credentials tries to extract username/password from OAuth 2 Bearer authorization header.",
    "user": {
      "login": "GrooveStomp",
      "id": 433268,
      "avatar_url": "https://secure.gravatar.com/avatar/d8e63ec3343b74ab6bb3f53a6c542541?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "d8e63ec3343b74ab6bb3f53a6c542541",
      "url": "https://api.github.com/users/GrooveStomp",
      "html_url": "https://github.com/GrooveStomp",
      "followers_url": "https://api.github.com/users/GrooveStomp/followers",
      "following_url": "https://api.github.com/users/GrooveStomp/following",
      "gists_url": "https://api.github.com/users/GrooveStomp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GrooveStomp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GrooveStomp/subscriptions",
      "organizations_url": "https://api.github.com/users/GrooveStomp/orgs",
      "repos_url": "https://api.github.com/users/GrooveStomp/repos",
      "events_url": "https://api.github.com/users/GrooveStomp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GrooveStomp/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionpack",
        "name": "actionpack",
        "color": "FFF700"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-04-18T01:03:21Z",
    "updated_at": "2013-04-18T04:10:26Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "ActionController::HttpAuthentication::Basic#decode_credentials will incorrectly decode authorization details if those details are passed using OAuth 2's \"bearer\" standard, and the controller calls `authenticate_with_http_basic`.\r\n\r\nHere is a Rails project I built to illustrate: https://github.com/GrooveStomp/RailsHttpBasicAuthBug\r\n\r\nHere is the sample controller: https://github.com/GrooveStomp/RailsHttpBasicAuthBug/blob/master/app/controllers/application_controller.rb\r\n\r\nHere is the test that illustrates the problem: https://github.com/GrooveStomp/RailsHttpBasicAuthBug/blob/master/spec/controllers/application_controller_spec.rb\r\n\r\nActionController should inspect the content of the `HTTP_AUTHORIZATION` header before attempting to decode it.\r\n\r\nI am seeing this specific error in my application:\r\n\r\n`ArgumentError: invalid byte sequence in UTF-8: SELECT  `users`.* FROM `users`  WHERE `users`.`type` IN ('ApiKey') AND `users`.`key` = '���y�t���M�k�7릝{wt���_�ݻsǸs��i�[w�\\\\wf�' LIMIT 1\r\ninvalid byte sequence in UTF-8`\r\n\r\nI'm using Rails 3.2.13."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10248",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10248/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10248/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10248/events",
    "html_url": "https://github.com/rails/rails/issues/10248",
    "id": 13296001,
    "number": 10248,
    "title": "Validations not running when I specify :on => :save option ",
    "user": {
      "login": "aditya-kapoor",
      "id": 1955930,
      "avatar_url": "https://secure.gravatar.com/avatar/7ce4d65f432864a629d71409f1443c68?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "7ce4d65f432864a629d71409f1443c68",
      "url": "https://api.github.com/users/aditya-kapoor",
      "html_url": "https://github.com/aditya-kapoor",
      "followers_url": "https://api.github.com/users/aditya-kapoor/followers",
      "following_url": "https://api.github.com/users/aditya-kapoor/following",
      "gists_url": "https://api.github.com/users/aditya-kapoor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aditya-kapoor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aditya-kapoor/subscriptions",
      "organizations_url": "https://api.github.com/users/aditya-kapoor/orgs",
      "repos_url": "https://api.github.com/users/aditya-kapoor/repos",
      "events_url": "https://api.github.com/users/aditya-kapoor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aditya-kapoor/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 17,
    "created_at": "2013-04-17T13:37:10Z",
    "updated_at": "2013-04-22T12:10:53Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "The Rails validations for presence are not running when I use :on => :save option. Kindly refer to the following gist \r\nhttps://gist.github.com/aditya-kapoor/5404279\r\nto know more. According to this gist, either the guide has not been in accordance with the Rails code or the Rails code has not been updated to reflect out what is said in the guide.\r\n\r\nI have an urgent requirement where I have to use the :on => :save option in the validation when I receive :create and :update in the parameters.\r\n\r\nI need to implement something like below:\r\n\r\ndef some_method(actions)\r\nif actions has :create and :update then return :save\r\nelse return actions.first\r\nend\r\n\r\naction = some_method([:create, :update])\r\n\r\nvalidates :name, :presence => true, :on => action"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10247",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10247/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10247/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10247/events",
    "html_url": "https://github.com/rails/rails/issues/10247",
    "id": 13295380,
    "number": 10247,
    "title": "get_primary_key logic complicates using updateable views (mysql) ",
    "user": {
      "login": "marcin-rzeznicki",
      "id": 3391348,
      "avatar_url": "https://secure.gravatar.com/avatar/5339510680a3b8969eaf3b4d51b71408?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "5339510680a3b8969eaf3b4d51b71408",
      "url": "https://api.github.com/users/marcin-rzeznicki",
      "html_url": "https://github.com/marcin-rzeznicki",
      "followers_url": "https://api.github.com/users/marcin-rzeznicki/followers",
      "following_url": "https://api.github.com/users/marcin-rzeznicki/following",
      "gists_url": "https://api.github.com/users/marcin-rzeznicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcin-rzeznicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcin-rzeznicki/subscriptions",
      "organizations_url": "https://api.github.com/users/marcin-rzeznicki/orgs",
      "repos_url": "https://api.github.com/users/marcin-rzeznicki/repos",
      "events_url": "https://api.github.com/users/marcin-rzeznicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcin-rzeznicki/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-04-17T13:20:58Z",
    "updated_at": "2013-04-17T13:20:58Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "I suspect that this case may be a little rare, but still. When you create model backed by update-able view *and* make it subclass of abstract class you end up with UnknownPrimaryKey. Please consider:\r\n\r\n```ruby\r\nclass PersistentObject < ActiveRecord::Base\r\n  self.abstract_class = true\r\nend\r\n\r\nclass  Anything < PersistentObject\r\nend\r\n```\r\n\r\nNow, how get_primary_key works in this case is that, since Base != self, it tries to get PK info from connection's schema cache. \r\n```ruby\r\ndef get_primary_key(base_name) #:nodoc:\r\n          return 'id' if base_name.blank?\r\n\r\n          case primary_key_prefix_type\r\n          when :table_name\r\n            base_name.foreign_key(false)\r\n          when :table_name_with_underscore\r\n            base_name.foreign_key\r\n          else\r\n            if ActiveRecord::Base != self && table_exists?\r\n              connection.schema_cache.primary_keys(table_name)\r\n            else\r\n              'id'\r\n            end\r\n          end\r\n        end\r\n```\r\n\r\nThis fails for mysql (at least) because information about view retrieved by SHOW FULL FIELDS does not contain primary fields info. IMO it'd be better to just return id in this case. Thanks"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/10242",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/10242/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/10242/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/10242/events",
    "html_url": "https://github.com/rails/rails/issues/10242",
    "id": 13276143,
    "number": 10242,
    "title": "counter_cache issue when creating or deleting records via a nested form",
    "user": {
      "login": "anime4christ",
      "id": 68075,
      "avatar_url": "https://secure.gravatar.com/avatar/3d5f0a89731c8c839a89f996f3f57ee6?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "3d5f0a89731c8c839a89f996f3f57ee6",
      "url": "https://api.github.com/users/anime4christ",
      "html_url": "https://github.com/anime4christ",
      "followers_url": "https://api.github.com/users/anime4christ/followers",
      "following_url": "https://api.github.com/users/anime4christ/following",
      "gists_url": "https://api.github.com/users/anime4christ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/anime4christ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/anime4christ/subscriptions",
      "organizations_url": "https://api.github.com/users/anime4christ/orgs",
      "repos_url": "https://api.github.com/users/anime4christ/repos",
      "events_url": "https://api.github.com/users/anime4christ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/anime4christ/received_events",
      "type": "User"
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2013-04-17T01:11:37Z",
    "updated_at": "2013-04-25T08:20:29Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "See code to reproduce this issue: https://gist.github.com/anime4christ/5400932\r\n\r\nWhen creating or deleting a record with child records via a nested form, the implicit `counter_cache` will decrement the `cache_column`, but will not increment it. The explicit `counter_cache` will completely fail and not update the `cache_column` at all.\r\n\r\nHere is the output with implicit `counter_cache`:\r\n\r\n    Active Record 3.2.13\r\n    -- create_table(\"photos\", {:force=>true})\r\n       -> 0.0126s\r\n    -- create_table(\"postings\", {:force=>true})\r\n       -> 0.0039s\r\n    Create posting with one photo via nested form:\r\n    Posting#photos_count: 0; Expected: 1\r\n    Delete posting's photo via nested form:\r\n    Posting#photos_count: -1; Expected: 0\r\n\r\nHere is the output with explicit `counter_cache`:\r\n\r\n    Active Record 3.2.13\r\n    -- create_table(\"photos\", {:force=>true})\r\n       -> 0.0145s\r\n    -- create_table(\"postings\", {:force=>true})\r\n       -> 0.0039s\r\n    Create posting with one photo via nested form:\r\n    Posting#photos_count: 0; Expected: 1\r\n    Delete posting's photo via nested form:\r\n    Posting#photos_count: 0; Expected: 0\r\n\r\nHere's the diff between the original file and the explicit:\r\n\r\n    28c28\r\n    <   belongs_to :posting\r\n    ---\r\n    >   belongs_to :posting, :counter_cache => true\r\n\r\nEdge Rails gives identical output except for the ActiveRecord version number."
  }
]
